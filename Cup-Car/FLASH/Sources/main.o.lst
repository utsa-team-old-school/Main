   1              		.cpu cortex-m0
   2              		.fpu softvfp
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 6
  10              		.eabi_attribute 34, 0
  11              		.eabi_attribute 18, 4
  12              		.code	16
  13              		.file	"main.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.comm	ClastTime,4,4
  18              		.comm	CSampleTime,4,4
  19              		.comm	CSampleTimeInSec,4,4
  20              		.comm	CInput,4,4
  21              		.comm	COutput,4,4
  22              		.comm	CSetpoint,4,4
  23              		.comm	Cerror,4,4
  24              		.comm	CITerm,4,4
  25              		.comm	ClastInput,4,4
  26              		.comm	Ckp,4,4
  27              		.comm	Cki,4,4
  28              		.comm	Ckd,4,4
  29              		.comm	CoutMin,4,4
  30              		.comm	CoutMax,4,4
  31              		.global	__aeabi_f2d
  32              		.global	__aeabi_dmul
  33              		.global	__aeabi_d2f
  34              		.global	__aeabi_i2f
  35              		.global	__aeabi_fadd
  36              		.global	__aeabi_ddiv
  37              		.global	__aeabi_d2uiz
  38              		.section	.rodata
  39              		.align	2
  40              	.LC10:
  41 0000 0D0A00   		.ascii	"\015\012\000"
  42 0003 00       		.align	2
  43              	.LC12:
  44 0004 4C3A00   		.ascii	"L:\000"
  45 0007 00       		.align	2
  46              	.LC14:
  47 0008 25582C00 		.ascii	"%X,\000"
  48              		.align	2
  49              	.LC16:
  50 000c 255800   		.ascii	"%X\000"
  51 000f 00       		.align	2
  52              	.LC18:
  53 0010 2C00     		.ascii	",\000"
  54              		.global	__aeabi_f2uiz
  55              		.global	__aeabi_ui2f
  56 0012 0000     		.section	.text.main,"ax",%progbits
  57              		.align	2
  58              		.global	main
  59              		.code	16
  60              		.thumb_func
  62              	main:
  63              	.LFB0:
  64              		.file 1 "../Sources/main.c"
   1:../Sources/main.c **** #include "derivative.h" /* include peripheral declarations */
   2:../Sources/main.c **** #include "TFC\TFC.h"
   3:../Sources/main.c **** 
   4:../Sources/main.c **** void Compute();
   5:../Sources/main.c **** 
   6:../Sources/main.c **** //working variables for compute routine
   7:../Sources/main.c **** unsigned long ClastTime, CSampleTime, CSampleTimeInSec;
   8:../Sources/main.c **** float CInput, COutput, CSetpoint, Cerror;
   9:../Sources/main.c **** float CITerm, ClastInput;
  10:../Sources/main.c **** float Ckp, Cki, Ckd;
  11:../Sources/main.c **** float CoutMin, CoutMax;
  12:../Sources/main.c **** 
  13:../Sources/main.c **** 
  14:../Sources/main.c **** //end of working variables for compute routine
  15:../Sources/main.c **** int main(void)
  16:../Sources/main.c **** {
  65              		.loc 1 16 0
  66              		.cfi_startproc
  67 0000 B0B5     		push	{r4, r5, r7, lr}
  68              	.LCFI0:
  69              		.cfi_def_cfa_offset 16
  70              		.cfi_offset 4, -16
  71              		.cfi_offset 5, -12
  72              		.cfi_offset 7, -8
  73              		.cfi_offset 14, -4
  74 0002 DF4C     		ldr	r4, .L71+8
  75 0004 A544     		add	sp, sp, r4
  76              	.LCFI1:
  77              		.cfi_def_cfa_offset 560
  78 0006 00AF     		add	r7, sp, #0
  79              	.LCFI2:
  80              		.cfi_def_cfa_register 7
  17:../Sources/main.c **** 	uint32_t t, Delta, i=0;
  81              		.loc 1 17 0
  82 0008 0023     		mov	r3, #0
  83 000a 8620     		mov	r0, #134
  84 000c 8000     		lsl	r0, r0, #2
  85 000e C019     		add	r0, r0, r7
  86 0010 0360     		str	r3, [r0]
  18:../Sources/main.c **** 	uint16_t  LineScanTemp[128],LSarray[128], LSavg, Ledge, Redge, Center, GoodRedge, GoodLedge;
  19:../Sources/main.c **** 	float	TmpLSavg;
  20:../Sources/main.c **** 	TFC_HBRIDGE_DISABLE;
  87              		.loc 1 20 0
  88 0012 DC4B     		ldr	r3, .L71+12
  89 0014 8022     		mov	r2, #128
  90 0016 9203     		lsl	r2, r2, #14
  91 0018 9A60     		str	r2, [r3, #8]
  21:../Sources/main.c **** 	CSetpoint = 64;		//Sets the target, min and max outs for the PID routine
  92              		.loc 1 21 0
  93 001a DB4B     		ldr	r3, .L71+16
  94 001c 8522     		mov	r2, #133
  95 001e D205     		lsl	r2, r2, #23
  96 0020 1A60     		str	r2, [r3]
  22:../Sources/main.c **** 	CoutMin = -.68;
  97              		.loc 1 22 0
  98 0022 DA4B     		ldr	r3, .L71+20
  99 0024 DA4A     		ldr	r2, .L71+24
 100 0026 1A60     		str	r2, [r3]
  23:../Sources/main.c **** 	CoutMax =  .68;
 101              		.loc 1 23 0
 102 0028 DA4B     		ldr	r3, .L71+28
 103 002a DB4A     		ldr	r2, .L71+32
 104 002c 1A60     		str	r2, [r3]
  24:../Sources/main.c **** 	//************************ Set the k values****************
  25:../Sources/main.c **** 	Ckp = .380;
 105              		.loc 1 25 0
 106 002e DB4B     		ldr	r3, .L71+36
 107 0030 DB4A     		ldr	r2, .L71+40
 108 0032 1A60     		str	r2, [r3]
  26:../Sources/main.c **** 	Cki = 0;
 109              		.loc 1 26 0
 110 0034 DB4B     		ldr	r3, .L71+44
 111 0036 0022     		mov	r2, #0
 112 0038 1A60     		str	r2, [r3]
  27:../Sources/main.c **** 	Ckd = .040;
 113              		.loc 1 27 0
 114 003a DB4B     		ldr	r3, .L71+48
 115 003c DB4A     		ldr	r2, .L71+52
 116 003e 1A60     		str	r2, [r3]
  28:../Sources/main.c **** 	
  29:../Sources/main.c **** 	//Set the line scan exposure time
  30:../Sources/main.c **** 	   TFC_Init();
 117              		.loc 1 30 0
 118 0040 FFF7FEFF 		bl	TFC_Init
  31:../Sources/main.c **** 	   			t = 0;
 119              		.loc 1 31 0
 120 0044 0023     		mov	r3, #0
 121 0046 8721     		mov	r1, #135
 122 0048 8900     		lsl	r1, r1, #2
 123 004a C919     		add	r1, r1, r7
 124 004c 0B60     		str	r3, [r1]
  32:../Sources/main.c **** 	   			i = 0;
 125              		.loc 1 32 0
 126 004e 0023     		mov	r3, #0
 127 0050 8622     		mov	r2, #134
 128 0052 9200     		lsl	r2, r2, #2
 129 0054 D219     		add	r2, r2, r7
 130 0056 1360     		str	r3, [r2]
  33:../Sources/main.c **** 	TFC_Ticker[3] = 0;
 131              		.loc 1 33 0
 132 0058 D54B     		ldr	r3, .L71+56
 133 005a 0022     		mov	r2, #0
 134 005c DA60     		str	r2, [r3, #12]
  34:../Sources/main.c **** 	while (!(TFC_PUSH_BUTTON_0_PRESSED)){ 
 135              		.loc 1 34 0
 136 005e 1DE0     		b	.L2
 137              	.L66:
  35:../Sources/main.c **** 	
  36:../Sources/main.c **** 		while (TFC_Ticker[3]<1000) continue;
 138              		.loc 1 36 0
 139 0060 C046     		mov	r8, r8
 140 0062 00E0     		b	.L3
 141              	.L68:
 142 0064 C046     		mov	r8, r8
 143              	.L3:
 144              		.loc 1 36 0 is_stmt 0
 145 0066 D24B     		ldr	r3, .L71+56
 146 0068 DA68     		ldr	r2, [r3, #12]
 147 006a D24B     		ldr	r3, .L71+60
 148 006c 9A42     		cmp	r2, r3
 149 006e F7D9     		bls	.L66
  37:../Sources/main.c **** 		TFC_Ticker[3] = 0;
 150              		.loc 1 37 0 is_stmt 1
 151 0070 CF4B     		ldr	r3, .L71+56
 152 0072 0022     		mov	r2, #0
 153 0074 DA60     		str	r2, [r3, #12]
  38:../Sources/main.c **** 		TFC_BAT_LED0_ON;
 154              		.loc 1 38 0
 155 0076 D04B     		ldr	r3, .L71+64
 156 0078 8022     		mov	r2, #128
 157 007a 5200     		lsl	r2, r2, #1
 158 007c 5A60     		str	r2, [r3, #4]
  39:../Sources/main.c **** 		while (TFC_Ticker[3]<1000) continue;
 159              		.loc 1 39 0
 160 007e C046     		mov	r8, r8
 161 0080 00E0     		b	.L5
 162              	.L67:
 163 0082 C046     		mov	r8, r8
 164              	.L5:
 165              		.loc 1 39 0 is_stmt 0
 166 0084 CA4B     		ldr	r3, .L71+56
 167 0086 DA68     		ldr	r2, [r3, #12]
 168 0088 CA4B     		ldr	r3, .L71+60
 169 008a 9A42     		cmp	r2, r3
 170 008c F9D9     		bls	.L67
  40:../Sources/main.c **** 		TFC_Ticker[3] = 0;
 171              		.loc 1 40 0 is_stmt 1
 172 008e C84B     		ldr	r3, .L71+56
 173 0090 0022     		mov	r2, #0
 174 0092 DA60     		str	r2, [r3, #12]
  41:../Sources/main.c **** 		TFC_BAT_LED0_OFF;
 175              		.loc 1 41 0
 176 0094 C84B     		ldr	r3, .L71+64
 177 0096 8022     		mov	r2, #128
 178 0098 5200     		lsl	r2, r2, #1
 179 009a 9A60     		str	r2, [r3, #8]
 180              	.L2:
  34:../Sources/main.c **** 	while (!(TFC_PUSH_BUTTON_0_PRESSED)){ 
 181              		.loc 1 34 0
 182 009c C74B     		ldr	r3, .L71+68
 183 009e 1A69     		ldr	r2, [r3, #16]
 184 00a0 8023     		mov	r3, #128
 185 00a2 9B01     		lsl	r3, r3, #6
 186 00a4 1340     		and	r3, r2
 187 00a6 DDD0     		beq	.L68
  42:../Sources/main.c **** 	}
  43:../Sources/main.c **** 	TFC_Ticker[3] = 0;
 188              		.loc 1 43 0
 189 00a8 C14B     		ldr	r3, .L71+56
 190 00aa 0022     		mov	r2, #0
 191 00ac DA60     		str	r2, [r3, #12]
  44:../Sources/main.c **** 	while (TFC_Ticker[3]<2000) continue;		//wait 2 seconds p button push
 192              		.loc 1 44 0
 193 00ae C046     		mov	r8, r8
 194 00b0 00E0     		b	.L8
 195              	.L69:
 196 00b2 C046     		mov	r8, r8
 197              	.L8:
 198              		.loc 1 44 0 is_stmt 0
 199 00b4 BE4B     		ldr	r3, .L71+56
 200 00b6 DA68     		ldr	r2, [r3, #12]
 201 00b8 C14B     		ldr	r3, .L71+72
 202 00ba 9A42     		cmp	r2, r3
 203 00bc F9D9     		bls	.L69
 204              	.L65:
  45:../Sources/main.c **** 	for(;;)
  46:../Sources/main.c **** 	{	   
  47:../Sources/main.c **** 		//TFC_Task must be called in your main loop.  This keeps certain processing happy (I.E. Serial po
  48:../Sources/main.c **** 			TFC_Task();
 205              		.loc 1 48 0 is_stmt 1
 206 00be FFF7FEFF 		bl	TFC_Task
  49:../Sources/main.c **** 
  50:../Sources/main.c **** 			//This Demo program will look at the middle 2 switch to select one of 4 demo modes.
  51:../Sources/main.c **** 			//Let's look at the middle 2 switches
  52:../Sources/main.c **** 			switch((TFC_GetDIP_Switch()>>1)&0x03)
 207              		.loc 1 52 0
 208 00c2 FFF7FEFF 		bl	TFC_GetDIP_Switch
 209 00c6 031C     		mov	r3, r0
 210 00c8 5B08     		lsr	r3, r3, #1
 211 00ca DBB2     		uxtb	r3, r3
 212 00cc 1A1C     		mov	r2, r3
 213 00ce 0323     		mov	r3, #3
 214 00d0 1340     		and	r3, r2
 215 00d2 022B     		cmp	r3, #2
 216 00d4 00D1     		bne	.LCB141
 217 00d6 8BE0     		b	.L12	@long jump
 218              	.LCB141:
 219 00d8 032B     		cmp	r3, #3
 220 00da 00D1     		bne	.LCB143
 221 00dc BFE0     		b	.L13	@long jump
 222              	.LCB143:
 223 00de 012B     		cmp	r3, #1
 224 00e0 40D0     		beq	.L11
  53:../Sources/main.c **** 			{
  54:../Sources/main.c **** 			default:
  55:../Sources/main.c **** 			case 0 :
  56:../Sources/main.c **** 				//Demo mode 0 just tests the switches and LED's
  57:../Sources/main.c **** 				if(TFC_PUSH_BUTTON_0_PRESSED)
 225              		.loc 1 57 0
 226 00e2 B64B     		ldr	r3, .L71+68
 227 00e4 1A69     		ldr	r2, [r3, #16]
 228 00e6 8023     		mov	r3, #128
 229 00e8 9B01     		lsl	r3, r3, #6
 230 00ea 1340     		and	r3, r2
 231 00ec 04D0     		beq	.L14
  58:../Sources/main.c **** 					TFC_BAT_LED0_ON;
 232              		.loc 1 58 0
 233 00ee B24B     		ldr	r3, .L71+64
 234 00f0 8022     		mov	r2, #128
 235 00f2 5200     		lsl	r2, r2, #1
 236 00f4 5A60     		str	r2, [r3, #4]
 237 00f6 03E0     		b	.L15
 238              	.L14:
  59:../Sources/main.c **** 				else
  60:../Sources/main.c **** 					TFC_BAT_LED0_OFF;
 239              		.loc 1 60 0
 240 00f8 AF4B     		ldr	r3, .L71+64
 241 00fa 8022     		mov	r2, #128
 242 00fc 5200     		lsl	r2, r2, #1
 243 00fe 9A60     		str	r2, [r3, #8]
 244              	.L15:
  61:../Sources/main.c **** 				
  62:../Sources/main.c **** 				if(TFC_PUSH_BUTTON_1_PRESSED)
 245              		.loc 1 62 0
 246 0100 AE4B     		ldr	r3, .L71+68
 247 0102 1A69     		ldr	r2, [r3, #16]
 248 0104 8023     		mov	r3, #128
 249 0106 9B02     		lsl	r3, r3, #10
 250 0108 1340     		and	r3, r2
 251 010a 04D0     		beq	.L16
  63:../Sources/main.c **** 					TFC_BAT_LED3_ON;
 252              		.loc 1 63 0
 253 010c AA4B     		ldr	r3, .L71+64
 254 010e 8022     		mov	r2, #128
 255 0110 1201     		lsl	r2, r2, #4
 256 0112 5A60     		str	r2, [r3, #4]
 257 0114 03E0     		b	.L17
 258              	.L16:
  64:../Sources/main.c **** 				else
  65:../Sources/main.c **** 					TFC_BAT_LED3_OFF;
 259              		.loc 1 65 0
 260 0116 A84B     		ldr	r3, .L71+64
 261 0118 8022     		mov	r2, #128
 262 011a 1201     		lsl	r2, r2, #4
 263 011c 9A60     		str	r2, [r3, #8]
 264              	.L17:
  66:../Sources/main.c **** 				
  67:../Sources/main.c **** 				
  68:../Sources/main.c **** 				if(TFC_GetDIP_Switch()&0x01)
 265              		.loc 1 68 0
 266 011e FFF7FEFF 		bl	TFC_GetDIP_Switch
 267 0122 031C     		mov	r3, r0
 268 0124 1A1C     		mov	r2, r3
 269 0126 0123     		mov	r3, #1
 270 0128 1340     		and	r3, r2
 271 012a 04D0     		beq	.L18
  69:../Sources/main.c **** 					TFC_BAT_LED1_ON;
 272              		.loc 1 69 0
 273 012c A24B     		ldr	r3, .L71+64
 274 012e 8022     		mov	r2, #128
 275 0130 9200     		lsl	r2, r2, #2
 276 0132 5A60     		str	r2, [r3, #4]
 277 0134 03E0     		b	.L19
 278              	.L18:
  70:../Sources/main.c **** 				else
  71:../Sources/main.c **** 					TFC_BAT_LED1_OFF;
 279              		.loc 1 71 0
 280 0136 A04B     		ldr	r3, .L71+64
 281 0138 8022     		mov	r2, #128
 282 013a 9200     		lsl	r2, r2, #2
 283 013c 9A60     		str	r2, [r3, #8]
 284              	.L19:
  72:../Sources/main.c **** 				
  73:../Sources/main.c **** 				if(TFC_GetDIP_Switch()&0x08)
 285              		.loc 1 73 0
 286 013e FFF7FEFF 		bl	TFC_GetDIP_Switch
 287 0142 031C     		mov	r3, r0
 288 0144 1A1C     		mov	r2, r3
 289 0146 0823     		mov	r3, #8
 290 0148 1340     		and	r3, r2
 291 014a 05D0     		beq	.L20
  74:../Sources/main.c **** 					TFC_BAT_LED2_ON;
 292              		.loc 1 74 0
 293 014c 9A4B     		ldr	r3, .L71+64
 294 014e 8022     		mov	r2, #128
 295 0150 D200     		lsl	r2, r2, #3
 296 0152 5A60     		str	r2, [r3, #4]
  75:../Sources/main.c **** 				else
  76:../Sources/main.c **** 					TFC_BAT_LED2_OFF;
  77:../Sources/main.c **** 				
  78:../Sources/main.c **** 				break;
 297              		.loc 1 78 0
 298 0154 00F02FFC 		bl	.L22	@ far jump
 299              	.L20:
  76:../Sources/main.c **** 					TFC_BAT_LED2_OFF;
 300              		.loc 1 76 0
 301 0158 974B     		ldr	r3, .L71+64
 302 015a 8022     		mov	r2, #128
 303 015c D200     		lsl	r2, r2, #3
 304 015e 9A60     		str	r2, [r3, #8]
 305              		.loc 1 78 0
 306 0160 00F029FC 		bl	.L22	@ far jump
 307              	.L11:
  79:../Sources/main.c **** 					
  80:../Sources/main.c **** 			case 1:
  81:../Sources/main.c **** 				
  82:../Sources/main.c **** 				//Demo mode 1 will just move the servos with the on-board potentiometers
  83:../Sources/main.c **** 				if(TFC_Ticker[0]>=20)
 308              		.loc 1 83 0
 309 0164 924B     		ldr	r3, .L71+56
 310 0166 1B68     		ldr	r3, [r3]
 311 0168 132B     		cmp	r3, #19
 312 016a 12D9     		bls	.L23
  84:../Sources/main.c **** 				{
  85:../Sources/main.c **** 					TFC_Ticker[0] = 0; //reset the Ticker
 313              		.loc 1 85 0
 314 016c 904B     		ldr	r3, .L71+56
 315 016e 0022     		mov	r2, #0
 316 0170 1A60     		str	r2, [r3]
  86:../Sources/main.c **** 					//Every 20 mSeconds, update the Servos
  87:../Sources/main.c **** 					TFC_SetServo(0,TFC_ReadPot(0));
 317              		.loc 1 87 0
 318 0172 0020     		mov	r0, #0
 319 0174 FFF7FEFF 		bl	TFC_ReadPot
 320 0178 031C     		add	r3, r0, #0
 321 017a 0020     		mov	r0, #0
 322 017c 191C     		add	r1, r3, #0
 323 017e FFF7FEFF 		bl	TFC_SetServo
  88:../Sources/main.c **** 					TFC_SetServo(1,TFC_ReadPot(1));
 324              		.loc 1 88 0
 325 0182 0120     		mov	r0, #1
 326 0184 FFF7FEFF 		bl	TFC_ReadPot
 327 0188 031C     		add	r3, r0, #0
 328 018a 0120     		mov	r0, #1
 329 018c 191C     		add	r1, r3, #0
 330 018e FFF7FEFF 		bl	TFC_SetServo
 331              	.L23:
  89:../Sources/main.c **** 				}
  90:../Sources/main.c **** 				//Let's put a pattern on the LEDs
  91:../Sources/main.c **** 				if(TFC_Ticker[1] >= 125)
 332              		.loc 1 91 0
 333 0192 874B     		ldr	r3, .L71+56
 334 0194 5B68     		ldr	r3, [r3, #4]
 335 0196 7C2B     		cmp	r3, #124
 336 0198 1ED9     		bls	.L24
  92:../Sources/main.c **** 				{
  93:../Sources/main.c **** 					TFC_Ticker[1] = 0;
 337              		.loc 1 93 0
 338 019a 854B     		ldr	r3, .L71+56
 339 019c 0022     		mov	r2, #0
 340 019e 5A60     		str	r2, [r3, #4]
  94:../Sources/main.c **** 					t++;
 341              		.loc 1 94 0
 342 01a0 8720     		mov	r0, #135
 343 01a2 8000     		lsl	r0, r0, #2
 344 01a4 C019     		add	r0, r0, r7
 345 01a6 0368     		ldr	r3, [r0]
 346 01a8 0133     		add	r3, r3, #1
 347 01aa 8721     		mov	r1, #135
 348 01ac 8900     		lsl	r1, r1, #2
 349 01ae C919     		add	r1, r1, r7
 350 01b0 0B60     		str	r3, [r1]
  95:../Sources/main.c **** 					if(t>4)
 351              		.loc 1 95 0
 352 01b2 8722     		mov	r2, #135
 353 01b4 9200     		lsl	r2, r2, #2
 354 01b6 D219     		add	r2, r2, r7
 355 01b8 1368     		ldr	r3, [r2]
 356 01ba 042B     		cmp	r3, #4
 357 01bc 04D9     		bls	.L25
  96:../Sources/main.c **** 					{
  97:../Sources/main.c **** 						t=0;
 358              		.loc 1 97 0
 359 01be 0023     		mov	r3, #0
 360 01c0 8720     		mov	r0, #135
 361 01c2 8000     		lsl	r0, r0, #2
 362 01c4 C019     		add	r0, r0, r7
 363 01c6 0360     		str	r3, [r0]
 364              	.L25:
  98:../Sources/main.c **** 					}			
  99:../Sources/main.c **** 					TFC_SetBatteryLED_Level(t);
 365              		.loc 1 99 0
 366 01c8 8721     		mov	r1, #135
 367 01ca 8900     		lsl	r1, r1, #2
 368 01cc C919     		add	r1, r1, r7
 369 01ce 0B68     		ldr	r3, [r1]
 370 01d0 DBB2     		uxtb	r3, r3
 371 01d2 181C     		mov	r0, r3
 372 01d4 FFF7FEFF 		bl	TFC_SetBatteryLED_Level
 373              	.L24:
 100:../Sources/main.c **** 				}
 101:../Sources/main.c **** 				
 102:../Sources/main.c **** 				TFC_SetMotorPWM(0,0); //Make sure motors are off
 374              		.loc 1 102 0
 375 01d8 0022     		mov	r2, #0
 376 01da 0023     		mov	r3, #0
 377 01dc 101C     		add	r0, r2, #0
 378 01de 191C     		add	r1, r3, #0
 379 01e0 FFF7FEFF 		bl	TFC_SetMotorPWM
 103:../Sources/main.c **** 				TFC_HBRIDGE_DISABLE;
 380              		.loc 1 103 0
 381 01e4 674B     		ldr	r3, .L71+12
 382 01e6 8022     		mov	r2, #128
 383 01e8 9203     		lsl	r2, r2, #14
 384 01ea 9A60     		str	r2, [r3, #8]
 104:../Sources/main.c **** 			
 105:../Sources/main.c **** 
 106:../Sources/main.c **** 				break;
 385              		.loc 1 106 0
 386 01ec 00F0E3FB 		bl	.L22	@ far jump
 387              	.L12:
 107:../Sources/main.c **** 				
 108:../Sources/main.c **** 			case 2 :
 109:../Sources/main.c **** 				
 110:../Sources/main.c **** 				//Demo Mode 2 will use the Pots to make the motors move
 111:../Sources/main.c **** 				TFC_HBRIDGE_ENABLE;
 388              		.loc 1 111 0
 389 01f0 644B     		ldr	r3, .L71+12
 390 01f2 8022     		mov	r2, #128
 391 01f4 9203     		lsl	r2, r2, #14
 392 01f6 5A60     		str	r2, [r3, #4]
 112:../Sources/main.c **** 				TFC_SetMotorPWM(TFC_ReadPot(0),TFC_ReadPot(1));
 393              		.loc 1 112 0
 394 01f8 0020     		mov	r0, #0
 395 01fa FFF7FEFF 		bl	TFC_ReadPot
 396 01fe 041C     		add	r4, r0, #0
 397 0200 0120     		mov	r0, #1
 398 0202 FFF7FEFF 		bl	TFC_ReadPot
 399 0206 031C     		add	r3, r0, #0
 400 0208 201C     		add	r0, r4, #0
 401 020a 191C     		add	r1, r3, #0
 402 020c FFF7FEFF 		bl	TFC_SetMotorPWM
 113:../Sources/main.c **** 						
 114:../Sources/main.c **** 				//Let's put a pattern on the LEDs
 115:../Sources/main.c **** 				if(TFC_Ticker[1] >= 125)
 403              		.loc 1 115 0
 404 0210 674B     		ldr	r3, .L71+56
 405 0212 5B68     		ldr	r3, [r3, #4]
 406 0214 7C2B     		cmp	r3, #124
 407 0216 01D8     		bhi	.LCB320
 408 0218 00F0CCFB 		bl	.L70	@far jump
 409              	.LCB320:
 116:../Sources/main.c **** 					{
 117:../Sources/main.c **** 						TFC_Ticker[1] = 0;
 410              		.loc 1 117 0
 411 021c 644B     		ldr	r3, .L71+56
 412 021e 0022     		mov	r2, #0
 413 0220 5A60     		str	r2, [r3, #4]
 118:../Sources/main.c **** 							t++;
 414              		.loc 1 118 0
 415 0222 8722     		mov	r2, #135
 416 0224 9200     		lsl	r2, r2, #2
 417 0226 D219     		add	r2, r2, r7
 418 0228 1368     		ldr	r3, [r2]
 419 022a 0133     		add	r3, r3, #1
 420 022c 8720     		mov	r0, #135
 421 022e 8000     		lsl	r0, r0, #2
 422 0230 C019     		add	r0, r0, r7
 423 0232 0360     		str	r3, [r0]
 119:../Sources/main.c **** 							if(t>4)
 424              		.loc 1 119 0
 425 0234 8721     		mov	r1, #135
 426 0236 8900     		lsl	r1, r1, #2
 427 0238 C919     		add	r1, r1, r7
 428 023a 0B68     		ldr	r3, [r1]
 429 023c 042B     		cmp	r3, #4
 430 023e 04D9     		bls	.L27
 120:../Sources/main.c **** 							{
 121:../Sources/main.c **** 								t=0;
 431              		.loc 1 121 0
 432 0240 0023     		mov	r3, #0
 433 0242 8722     		mov	r2, #135
 434 0244 9200     		lsl	r2, r2, #2
 435 0246 D219     		add	r2, r2, r7
 436 0248 1360     		str	r3, [r2]
 437              	.L27:
 122:../Sources/main.c **** 							}			
 123:../Sources/main.c **** 						TFC_SetBatteryLED_Level(t);
 438              		.loc 1 123 0
 439 024a 8720     		mov	r0, #135
 440 024c 8000     		lsl	r0, r0, #2
 441 024e C019     		add	r0, r0, r7
 442 0250 0368     		ldr	r3, [r0]
 443 0252 DBB2     		uxtb	r3, r3
 444 0254 181C     		mov	r0, r3
 445 0256 FFF7FEFF 		bl	TFC_SetBatteryLED_Level
 124:../Sources/main.c **** 					}
 125:../Sources/main.c **** 				break;
 446              		.loc 1 125 0
 447 025a 00F0ABFB 		bl	.L70	@ far jump
 448              	.L13:
 126:../Sources/main.c **** 			
 127:../Sources/main.c **** 			case 3 :
 128:../Sources/main.c **** 			
 129:../Sources/main.c **** 				//Demo Mode 3 will be in Freescale Garage Mode.  It will beam data from the Camera to the 
 130:../Sources/main.c **** 				//Labview Application
 131:../Sources/main.c **** 			
 132:../Sources/main.c **** 
 133:../Sources/main.c **** 
 134:../Sources/main.c **** 
 135:../Sources/main.c **** 				TFC_SetServo(0,0);						//center wheels
 449              		.loc 1 135 0
 450 025e 0023     		mov	r3, #0
 451 0260 0020     		mov	r0, #0
 452 0262 191C     		add	r1, r3, #0
 453 0264 FFF7FEFF 		bl	TFC_SetServo
 136:../Sources/main.c **** 				TFC_HBRIDGE_DISABLE;
 454              		.loc 1 136 0
 455 0268 464B     		ldr	r3, .L71+12
 456 026a 8022     		mov	r2, #128
 457 026c 9203     		lsl	r2, r2, #14
 458 026e 9A60     		str	r2, [r3, #8]
 137:../Sources/main.c **** 				TFC_HBRIDGE_ENABLE;
 459              		.loc 1 137 0
 460 0270 444B     		ldr	r3, .L71+12
 461 0272 8022     		mov	r2, #128
 462 0274 9203     		lsl	r2, r2, #14
 463 0276 5A60     		str	r2, [r3, #4]
 138:../Sources/main.c **** 				
 139:../Sources/main.c **** 				TFC_SetMotorPWM((TFC_ReadPot(1)),.62* TFC_ReadPot(1));//start motor at post 0 setting			
 464              		.loc 1 139 0
 465 0278 0120     		mov	r0, #1
 466 027a FFF7FEFF 		bl	TFC_ReadPot
 467 027e 051C     		add	r5, r0, #0
 468 0280 0120     		mov	r0, #1
 469 0282 FFF7FEFF 		bl	TFC_ReadPot
 470 0286 031C     		add	r3, r0, #0
 471 0288 181C     		add	r0, r3, #0
 472 028a FFF7FEFF 		bl	__aeabi_f2d
 473 028e 031C     		mov	r3, r0
 474 0290 0C1C     		mov	r4, r1
 475 0292 181C     		mov	r0, r3
 476 0294 211C     		mov	r1, r4
 477 0296 394B     		ldr	r3, .L71+4
 478 0298 374A     		ldr	r2, .L71
 479 029a FFF7FEFF 		bl	__aeabi_dmul
 480 029e 031C     		mov	r3, r0
 481 02a0 0C1C     		mov	r4, r1
 482 02a2 181C     		mov	r0, r3
 483 02a4 211C     		mov	r1, r4
 484 02a6 FFF7FEFF 		bl	__aeabi_d2f
 485 02aa 031C     		add	r3, r0, #0
 486 02ac 281C     		add	r0, r5, #0
 487 02ae 191C     		add	r1, r3, #0
 488 02b0 FFF7FEFF 		bl	TFC_SetMotorPWM
 140:../Sources/main.c **** 
 141:../Sources/main.c **** 				if(TFC_Ticker[0]>25 && LineScanImageReady==1)
 489              		.loc 1 141 0
 490 02b4 3E4B     		ldr	r3, .L71+56
 491 02b6 1B68     		ldr	r3, [r3]
 492 02b8 192B     		cmp	r3, #25
 493 02ba 00D8     		bhi	.LCB395
 494 02bc 55E3     		b	.L28	@long jump
 495              	.LCB395:
 496              		.loc 1 141 0 is_stmt 0
 497 02be 414B     		ldr	r3, .L71+76
 498 02c0 1B78     		ldrb	r3, [r3]
 499 02c2 DBB2     		uxtb	r3, r3
 500 02c4 012B     		cmp	r3, #1
 501 02c6 00D0     		beq	.LCB400
 502 02c8 4FE3     		b	.L28	@long jump
 503              	.LCB400:
 142:../Sources/main.c **** 				{
 143:../Sources/main.c **** 									 TFC_Ticker[0] = 0;
 504              		.loc 1 143 0 is_stmt 1
 505 02ca 394B     		ldr	r3, .L71+56
 506 02cc 0022     		mov	r2, #0
 507 02ce 1A60     		str	r2, [r3]
 144:../Sources/main.c **** 									 LineScanImageReady=0;
 508              		.loc 1 144 0
 509 02d0 3C4B     		ldr	r3, .L71+76
 510 02d2 0022     		mov	r2, #0
 511 02d4 1A70     		strb	r2, [r3]
 145:../Sources/main.c **** 
 146:../Sources/main.c **** 									 
 147:../Sources/main.c **** 										//  Here is the line scan processing for black line detection Method #2
 148:../Sources/main.c **** 									LSavg = 0;
 512              		.loc 1 148 0
 513 02d6 3C49     		ldr	r1, .L71+80
 514 02d8 7B18     		add	r3, r7, r1
 515 02da 0022     		mov	r2, #0
 516 02dc 1A80     		strh	r2, [r3]
 149:../Sources/main.c **** 									TmpLSavg = 0.0;
 517              		.loc 1 149 0
 518 02de 0023     		mov	r3, #0
 519 02e0 8222     		mov	r2, #130
 520 02e2 9200     		lsl	r2, r2, #2
 521 02e4 D219     		add	r2, r2, r7
 522 02e6 1360     		str	r3, [r2]
 150:../Sources/main.c **** 							
 151:../Sources/main.c **** 									 for(i=0;i<128;i++)   //first save the line to the temp file
 523              		.loc 1 151 0
 524 02e8 0023     		mov	r3, #0
 525 02ea 8620     		mov	r0, #134
 526 02ec 8000     		lsl	r0, r0, #2
 527 02ee C019     		add	r0, r0, r7
 528 02f0 0360     		str	r3, [r0]
 529 02f2 33E0     		b	.L29
 530              	.L30:
 152:../Sources/main.c **** 									 {
 153:../Sources/main.c **** 										 	 LineScanTemp[i] = LineScanImage0[i];
 531              		.loc 1 153 0
 532 02f4 354B     		ldr	r3, .L71+84
 533 02f6 1A68     		ldr	r2, [r3]
 534 02f8 8621     		mov	r1, #134
 535 02fa 8900     		lsl	r1, r1, #2
 536 02fc C919     		add	r1, r1, r7
 537 02fe 0B68     		ldr	r3, [r1]
 538 0300 5B00     		lsl	r3, r3, #1
 539 0302 D318     		add	r3, r2, r3
 540 0304 1B88     		ldrh	r3, [r3]
 541 0306 99B2     		uxth	r1, r3
 542 0308 314B     		ldr	r3, .L71+88
 543 030a 8822     		mov	r2, #136
 544 030c 9200     		lsl	r2, r2, #2
 545 030e D219     		add	r2, r2, r7
 546 0310 D318     		add	r3, r2, r3
 547 0312 8620     		mov	r0, #134
 548 0314 8000     		lsl	r0, r0, #2
 549 0316 C019     		add	r0, r0, r7
 550 0318 0268     		ldr	r2, [r0]
 551 031a 5200     		lsl	r2, r2, #1
 552 031c D152     		strh	r1, [r2, r3]
 154:../Sources/main.c **** 										 	 LSarray[i] = LineScanTemp[i];
 553              		.loc 1 154 0
 554 031e 2C4B     		ldr	r3, .L71+88
 555 0320 8821     		mov	r1, #136
 556 0322 8900     		lsl	r1, r1, #2
 557 0324 C919     		add	r1, r1, r7
 558 0326 CB18     		add	r3, r1, r3
 559 0328 8620     		mov	r0, #134
 560 032a 8000     		lsl	r0, r0, #2
 561 032c C019     		add	r0, r0, r7
 562 032e 0268     		ldr	r2, [r0]
 563 0330 5200     		lsl	r2, r2, #1
 564 0332 D15A     		ldrh	r1, [r2, r3]
 565 0334 124B     		ldr	r3, .L71+8
 566 0336 8822     		mov	r2, #136
 567 0338 9200     		lsl	r2, r2, #2
 568 033a D219     		add	r2, r2, r7
 569 033c D318     		add	r3, r2, r3
 570 033e 8620     		mov	r0, #134
 571 0340 8000     		lsl	r0, r0, #2
 572 0342 C019     		add	r0, r0, r7
 573 0344 0268     		ldr	r2, [r0]
 574 0346 5200     		lsl	r2, r2, #1
 575 0348 D152     		strh	r1, [r2, r3]
 151:../Sources/main.c **** 									 for(i=0;i<128;i++)   //first save the line to the temp file
 576              		.loc 1 151 0
 577 034a 8621     		mov	r1, #134
 578 034c 8900     		lsl	r1, r1, #2
 579 034e C919     		add	r1, r1, r7
 580 0350 0B68     		ldr	r3, [r1]
 581 0352 0133     		add	r3, r3, #1
 582 0354 8622     		mov	r2, #134
 583 0356 9200     		lsl	r2, r2, #2
 584 0358 D219     		add	r2, r2, r7
 585 035a 1360     		str	r3, [r2]
 586              	.L29:
 151:../Sources/main.c **** 									 for(i=0;i<128;i++)   //first save the line to the temp file
 587              		.loc 1 151 0 is_stmt 0
 588 035c 8620     		mov	r0, #134
 589 035e 8000     		lsl	r0, r0, #2
 590 0360 C019     		add	r0, r0, r7
 591 0362 0368     		ldr	r3, [r0]
 592 0364 7F2B     		cmp	r3, #127
 593 0366 C5D9     		bls	.L30
 155:../Sources/main.c **** 									 }
 156:../Sources/main.c **** 									 for(i=0;i<128;i++)  // Now get the average
 594              		.loc 1 156 0 is_stmt 1
 595 0368 0023     		mov	r3, #0
 596 036a 8621     		mov	r1, #134
 597 036c 8900     		lsl	r1, r1, #2
 598 036e C919     		add	r1, r1, r7
 599 0370 0B60     		str	r3, [r1]
 600 0372 53E0     		b	.L31
 601              	.L72:
 602 0374 C046C046 		.align	3
 603              	.L71:
 604 0378 D7A3703D 		.word	1030792151
 605 037c 0AD7E33F 		.word	1071896330
 606 0380 E0FDFFFF 		.word	-544
 607 0384 00F10F40 		.word	1074786560
 608 0388 00000000 		.word	CSetpoint
 609 038c 00000000 		.word	CoutMin
 610 0390 7B142EBF 		.word	-1087499141
 611 0394 00000000 		.word	CoutMax
 612 0398 7B142E3F 		.word	1059984507
 613 039c 00000000 		.word	Ckp
 614 03a0 5C8FC23E 		.word	1052938076
 615 03a4 00000000 		.word	Cki
 616 03a8 00000000 		.word	Ckd
 617 03ac 0AD7233D 		.word	1025758986
 618 03b0 00000000 		.word	TFC_Ticker
 619 03b4 E7030000 		.word	999
 620 03b8 40F00F40 		.word	1074786368
 621 03bc 80F00F40 		.word	1074786432
 622 03c0 CF070000 		.word	1999
 623 03c4 00000000 		.word	LineScanImageReady
 624 03c8 06020000 		.word	518
 625 03cc 00000000 		.word	LineScanImage0
 626 03d0 E0FEFFFF 		.word	-288
 627              	.L32:
 157:../Sources/main.c **** 									 {
 158:../Sources/main.c **** 										 	 TmpLSavg += LineScanTemp[i];
 628              		.loc 1 158 0
 629 03d4 C04B     		ldr	r3, .L73+16
 630 03d6 8822     		mov	r2, #136
 631 03d8 9200     		lsl	r2, r2, #2
 632 03da D219     		add	r2, r2, r7
 633 03dc D318     		add	r3, r2, r3
 634 03de 8620     		mov	r0, #134
 635 03e0 8000     		lsl	r0, r0, #2
 636 03e2 C019     		add	r0, r0, r7
 637 03e4 0268     		ldr	r2, [r0]
 638 03e6 5200     		lsl	r2, r2, #1
 639 03e8 D35A     		ldrh	r3, [r2, r3]
 640 03ea 181C     		mov	r0, r3
 641 03ec FFF7FEFF 		bl	__aeabi_i2f
 642 03f0 031C     		add	r3, r0, #0
 643 03f2 8221     		mov	r1, #130
 644 03f4 8900     		lsl	r1, r1, #2
 645 03f6 C919     		add	r1, r1, r7
 646 03f8 0868     		ldr	r0, [r1]
 647 03fa 191C     		add	r1, r3, #0
 648 03fc FFF7FEFF 		bl	__aeabi_fadd
 649 0400 031C     		add	r3, r0, #0
 650 0402 8222     		mov	r2, #130
 651 0404 9200     		lsl	r2, r2, #2
 652 0406 D219     		add	r2, r2, r7
 653 0408 1360     		str	r3, [r2]
 156:../Sources/main.c **** 									 for(i=0;i<128;i++)  // Now get the average
 654              		.loc 1 156 0
 655 040a 8620     		mov	r0, #134
 656 040c 8000     		lsl	r0, r0, #2
 657 040e C019     		add	r0, r0, r7
 658 0410 0368     		ldr	r3, [r0]
 659 0412 0133     		add	r3, r3, #1
 660 0414 8621     		mov	r1, #134
 661 0416 8900     		lsl	r1, r1, #2
 662 0418 C919     		add	r1, r1, r7
 663 041a 0B60     		str	r3, [r1]
 664              	.L31:
 156:../Sources/main.c **** 									 for(i=0;i<128;i++)  // Now get the average
 665              		.loc 1 156 0 is_stmt 0
 666 041c 8622     		mov	r2, #134
 667 041e 9200     		lsl	r2, r2, #2
 668 0420 D219     		add	r2, r2, r7
 669 0422 1368     		ldr	r3, [r2]
 670 0424 7F2B     		cmp	r3, #127
 671 0426 D5D9     		bls	.L32
 159:../Sources/main.c **** 									 }
 160:../Sources/main.c **** 									 LSavg = (uint16_t) ((TmpLSavg / 128.0)*.8) ;
 672              		.loc 1 160 0 is_stmt 1
 673 0428 8223     		mov	r3, #130
 674 042a 9B00     		lsl	r3, r3, #2
 675 042c DB19     		add	r3, r3, r7
 676 042e 1868     		ldr	r0, [r3]
 677 0430 FFF7FEFF 		bl	__aeabi_f2d
 678 0434 031C     		mov	r3, r0
 679 0436 0C1C     		mov	r4, r1
 680 0438 181C     		mov	r0, r3
 681 043a 211C     		mov	r1, r4
 682 043c A34B     		ldr	r3, .L73+4
 683 043e A24A     		ldr	r2, .L73
 684 0440 FFF7FEFF 		bl	__aeabi_ddiv
 685 0444 031C     		mov	r3, r0
 686 0446 0C1C     		mov	r4, r1
 687 0448 181C     		mov	r0, r3
 688 044a 211C     		mov	r1, r4
 689 044c A04A     		ldr	r2, .L73+8
 690 044e A14B     		ldr	r3, .L73+12
 691 0450 FFF7FEFF 		bl	__aeabi_dmul
 692 0454 031C     		mov	r3, r0
 693 0456 0C1C     		mov	r4, r1
 694 0458 A048     		ldr	r0, .L73+20
 695 045a 3D18     		add	r5, r7, r0
 696 045c 181C     		mov	r0, r3
 697 045e 211C     		mov	r1, r4
 698 0460 FFF7FEFF 		bl	__aeabi_d2uiz
 699 0464 031C     		mov	r3, r0
 700 0466 2B80     		strh	r3, [r5]
 161:../Sources/main.c **** 									 //TERMINAL_PRINTF("Average = %X,", LSavg);					 
 162:../Sources/main.c **** 									 for(i=0;i<128;i++)
 701              		.loc 1 162 0
 702 0468 0023     		mov	r3, #0
 703 046a 8621     		mov	r1, #134
 704 046c 8900     		lsl	r1, r1, #2
 705 046e C919     		add	r1, r1, r7
 706 0470 0B60     		str	r3, [r1]
 707 0472 32E0     		b	.L33
 708              	.L36:
 163:../Sources/main.c **** 									 {	 
 164:../Sources/main.c **** 										if (LineScanTemp[i] >= LSavg)   //this turns the line scan into only 2000 or 50 values an
 709              		.loc 1 164 0
 710 0474 984B     		ldr	r3, .L73+16
 711 0476 8822     		mov	r2, #136
 712 0478 9200     		lsl	r2, r2, #2
 713 047a D219     		add	r2, r2, r7
 714 047c D318     		add	r3, r2, r3
 715 047e 8620     		mov	r0, #134
 716 0480 8000     		lsl	r0, r0, #2
 717 0482 C019     		add	r0, r0, r7
 718 0484 0268     		ldr	r2, [r0]
 719 0486 5200     		lsl	r2, r2, #1
 720 0488 D35A     		ldrh	r3, [r2, r3]
 721 048a 9449     		ldr	r1, .L73+20
 722 048c 7A18     		add	r2, r7, r1
 723 048e 1288     		ldrh	r2, [r2]
 724 0490 9A42     		cmp	r2, r3
 725 0492 0DD8     		bhi	.L34
 165:../Sources/main.c **** 										 LSarray[i] = 2000;
 726              		.loc 1 165 0
 727 0494 924B     		ldr	r3, .L73+24
 728 0496 8822     		mov	r2, #136
 729 0498 9200     		lsl	r2, r2, #2
 730 049a D219     		add	r2, r2, r7
 731 049c D318     		add	r3, r2, r3
 732 049e 8620     		mov	r0, #134
 733 04a0 8000     		lsl	r0, r0, #2
 734 04a2 C019     		add	r0, r0, r7
 735 04a4 0268     		ldr	r2, [r0]
 736 04a6 5200     		lsl	r2, r2, #1
 737 04a8 FA21     		mov	r1, #250
 738 04aa C900     		lsl	r1, r1, #3
 739 04ac D152     		strh	r1, [r2, r3]
 740 04ae 0BE0     		b	.L35
 741              	.L34:
 166:../Sources/main.c **** 										else
 167:../Sources/main.c **** 										 LSarray[i] = 50;
 742              		.loc 1 167 0
 743 04b0 8B4B     		ldr	r3, .L73+24
 744 04b2 8821     		mov	r1, #136
 745 04b4 8900     		lsl	r1, r1, #2
 746 04b6 C919     		add	r1, r1, r7
 747 04b8 CB18     		add	r3, r1, r3
 748 04ba 8620     		mov	r0, #134
 749 04bc 8000     		lsl	r0, r0, #2
 750 04be C019     		add	r0, r0, r7
 751 04c0 0268     		ldr	r2, [r0]
 752 04c2 5200     		lsl	r2, r2, #1
 753 04c4 3221     		mov	r1, #50
 754 04c6 D152     		strh	r1, [r2, r3]
 755              	.L35:
 162:../Sources/main.c **** 									 for(i=0;i<128;i++)
 756              		.loc 1 162 0
 757 04c8 8621     		mov	r1, #134
 758 04ca 8900     		lsl	r1, r1, #2
 759 04cc C919     		add	r1, r1, r7
 760 04ce 0B68     		ldr	r3, [r1]
 761 04d0 0133     		add	r3, r3, #1
 762 04d2 8622     		mov	r2, #134
 763 04d4 9200     		lsl	r2, r2, #2
 764 04d6 D219     		add	r2, r2, r7
 765 04d8 1360     		str	r3, [r2]
 766              	.L33:
 162:../Sources/main.c **** 									 for(i=0;i<128;i++)
 767              		.loc 1 162 0 is_stmt 0
 768 04da 8620     		mov	r0, #134
 769 04dc 8000     		lsl	r0, r0, #2
 770 04de C019     		add	r0, r0, r7
 771 04e0 0368     		ldr	r3, [r0]
 772 04e2 7F2B     		cmp	r3, #127
 773 04e4 C6D9     		bls	.L36
 168:../Sources/main.c **** 				 				     }	 
 169:../Sources/main.c **** 									 
 170:../Sources/main.c **** 									 //  Determine edge detection
 171:../Sources/main.c **** 									 // Start from middle +/- 20-30 or so and search both ways  Only require a single point di
 172:../Sources/main.c **** 									 Ledge = 70 ;  //dont change these with out changing if statements !!!
 774              		.loc 1 172 0 is_stmt 1
 775 04e6 7F49     		ldr	r1, .L73+28
 776 04e8 7B18     		add	r3, r7, r1
 777 04ea 4622     		mov	r2, #70
 778 04ec 1A80     		strh	r2, [r3]
 173:../Sources/main.c **** 									 Redge = 56 ;
 779              		.loc 1 173 0
 780 04ee 8522     		mov	r2, #133
 781 04f0 9200     		lsl	r2, r2, #2
 782 04f2 BB18     		add	r3, r7, r2
 783 04f4 3822     		mov	r2, #56
 784 04f6 1A80     		strh	r2, [r3]
 174:../Sources/main.c **** 									 for (i=84; i > 4 ;i--)
 785              		.loc 1 174 0
 786 04f8 5423     		mov	r3, #84
 787 04fa 8620     		mov	r0, #134
 788 04fc 8000     		lsl	r0, r0, #2
 789 04fe C019     		add	r0, r0, r7
 790 0500 0360     		str	r3, [r0]
 791 0502 2DE0     		b	.L37
 792              	.L40:
 175:../Sources/main.c **** 									 { 
 176:../Sources/main.c **** 										if ((LineScanTemp[i]-LineScanTemp[i-1]) > 400)
 793              		.loc 1 176 0
 794 0504 744B     		ldr	r3, .L73+16
 795 0506 8821     		mov	r1, #136
 796 0508 8900     		lsl	r1, r1, #2
 797 050a C919     		add	r1, r1, r7
 798 050c CB18     		add	r3, r1, r3
 799 050e 8620     		mov	r0, #134
 800 0510 8000     		lsl	r0, r0, #2
 801 0512 C019     		add	r0, r0, r7
 802 0514 0268     		ldr	r2, [r0]
 803 0516 5200     		lsl	r2, r2, #1
 804 0518 D35A     		ldrh	r3, [r2, r3]
 805 051a 1A1C     		mov	r2, r3
 806 051c 8621     		mov	r1, #134
 807 051e 8900     		lsl	r1, r1, #2
 808 0520 C919     		add	r1, r1, r7
 809 0522 0B68     		ldr	r3, [r1]
 810 0524 591E     		sub	r1, r3, #1
 811 0526 6C4B     		ldr	r3, .L73+16
 812 0528 8820     		mov	r0, #136
 813 052a 8000     		lsl	r0, r0, #2
 814 052c C019     		add	r0, r0, r7
 815 052e C318     		add	r3, r0, r3
 816 0530 4900     		lsl	r1, r1, #1
 817 0532 CB5A     		ldrh	r3, [r1, r3]
 818 0534 D21A     		sub	r2, r2, r3
 819 0536 C823     		mov	r3, #200
 820 0538 5B00     		lsl	r3, r3, #1
 821 053a 9A42     		cmp	r2, r3
 822 053c 07DD     		ble	.L38
 177:../Sources/main.c **** 										{
 178:../Sources/main.c **** 											Ledge = i;        // This is the first edge to the left
 823              		.loc 1 178 0
 824 053e 6949     		ldr	r1, .L73+28
 825 0540 7B18     		add	r3, r7, r1
 826 0542 8620     		mov	r0, #134
 827 0544 8000     		lsl	r0, r0, #2
 828 0546 C019     		add	r0, r0, r7
 829 0548 0268     		ldr	r2, [r0]
 830 054a 1A80     		strh	r2, [r3]
 179:../Sources/main.c **** 											break;
 831              		.loc 1 179 0
 832 054c 0EE0     		b	.L39
 833              	.L38:
 174:../Sources/main.c **** 									 for (i=84; i > 4 ;i--)
 834              		.loc 1 174 0
 835 054e 8621     		mov	r1, #134
 836 0550 8900     		lsl	r1, r1, #2
 837 0552 C919     		add	r1, r1, r7
 838 0554 0B68     		ldr	r3, [r1]
 839 0556 013B     		sub	r3, r3, #1
 840 0558 8622     		mov	r2, #134
 841 055a 9200     		lsl	r2, r2, #2
 842 055c D219     		add	r2, r2, r7
 843 055e 1360     		str	r3, [r2]
 844              	.L37:
 174:../Sources/main.c **** 									 for (i=84; i > 4 ;i--)
 845              		.loc 1 174 0 is_stmt 0
 846 0560 8620     		mov	r0, #134
 847 0562 8000     		lsl	r0, r0, #2
 848 0564 C019     		add	r0, r0, r7
 849 0566 0368     		ldr	r3, [r0]
 850 0568 042B     		cmp	r3, #4
 851 056a CBD8     		bhi	.L40
 852              	.L39:
 180:../Sources/main.c **** 										}
 181:../Sources/main.c **** 									
 182:../Sources/main.c **** 										
 183:../Sources/main.c **** 										
 184:../Sources/main.c **** 									 }
 185:../Sources/main.c **** 									 
 186:../Sources/main.c **** 										GoodLedge = 0;
 853              		.loc 1 186 0 is_stmt 1
 854 056c 5E49     		ldr	r1, .L73+32
 855 056e 7B18     		add	r3, r7, r1
 856 0570 0022     		mov	r2, #0
 857 0572 1A80     		strh	r2, [r3]
 187:../Sources/main.c **** 									 for (i=Ledge; i>=4; i--)
 858              		.loc 1 187 0
 859 0574 5B4A     		ldr	r2, .L73+28
 860 0576 BB18     		add	r3, r7, r2
 861 0578 1B88     		ldrh	r3, [r3]
 862 057a 8620     		mov	r0, #134
 863 057c 8000     		lsl	r0, r0, #2
 864 057e C019     		add	r0, r0, r7
 865 0580 0360     		str	r3, [r0]
 866 0582 2CE0     		b	.L41
 867              	.L44:
 188:../Sources/main.c **** 									 {
 189:../Sources/main.c **** 											if ((LSarray[i] == 2000 )&&(LSarray[i-1] == 2000))  //need two points of white
 868              		.loc 1 189 0
 869 0584 564B     		ldr	r3, .L73+24
 870 0586 8821     		mov	r1, #136
 871 0588 8900     		lsl	r1, r1, #2
 872 058a C919     		add	r1, r1, r7
 873 058c CB18     		add	r3, r1, r3
 874 058e 8620     		mov	r0, #134
 875 0590 8000     		lsl	r0, r0, #2
 876 0592 C019     		add	r0, r0, r7
 877 0594 0268     		ldr	r2, [r0]
 878 0596 5200     		lsl	r2, r2, #1
 879 0598 D25A     		ldrh	r2, [r2, r3]
 880 059a FA23     		mov	r3, #250
 881 059c DB00     		lsl	r3, r3, #3
 882 059e 9A42     		cmp	r2, r3
 883 05a0 14D1     		bne	.L42
 884              		.loc 1 189 0 is_stmt 0
 885 05a2 8621     		mov	r1, #134
 886 05a4 8900     		lsl	r1, r1, #2
 887 05a6 C919     		add	r1, r1, r7
 888 05a8 0B68     		ldr	r3, [r1]
 889 05aa 5A1E     		sub	r2, r3, #1
 890 05ac 4C4B     		ldr	r3, .L73+24
 891 05ae 8820     		mov	r0, #136
 892 05b0 8000     		lsl	r0, r0, #2
 893 05b2 C019     		add	r0, r0, r7
 894 05b4 C318     		add	r3, r0, r3
 895 05b6 5200     		lsl	r2, r2, #1
 896 05b8 D25A     		ldrh	r2, [r2, r3]
 897 05ba FA23     		mov	r3, #250
 898 05bc DB00     		lsl	r3, r3, #3
 899 05be 9A42     		cmp	r2, r3
 900 05c0 04D1     		bne	.L42
 190:../Sources/main.c **** 											{
 191:../Sources/main.c **** 												GoodLedge = 1;
 901              		.loc 1 191 0 is_stmt 1
 902 05c2 4949     		ldr	r1, .L73+32
 903 05c4 7B18     		add	r3, r7, r1
 904 05c6 0122     		mov	r2, #1
 905 05c8 1A80     		strh	r2, [r3]
 192:../Sources/main.c **** 												break;
 906              		.loc 1 192 0
 907 05ca 0EE0     		b	.L43
 908              	.L42:
 187:../Sources/main.c **** 									 for (i=Ledge; i>=4; i--)
 909              		.loc 1 187 0
 910 05cc 8622     		mov	r2, #134
 911 05ce 9200     		lsl	r2, r2, #2
 912 05d0 D219     		add	r2, r2, r7
 913 05d2 1368     		ldr	r3, [r2]
 914 05d4 013B     		sub	r3, r3, #1
 915 05d6 8620     		mov	r0, #134
 916 05d8 8000     		lsl	r0, r0, #2
 917 05da C019     		add	r0, r0, r7
 918 05dc 0360     		str	r3, [r0]
 919              	.L41:
 187:../Sources/main.c **** 									 for (i=Ledge; i>=4; i--)
 920              		.loc 1 187 0 is_stmt 0
 921 05de 8621     		mov	r1, #134
 922 05e0 8900     		lsl	r1, r1, #2
 923 05e2 C919     		add	r1, r1, r7
 924 05e4 0B68     		ldr	r3, [r1]
 925 05e6 032B     		cmp	r3, #3
 926 05e8 CCD8     		bhi	.L44
 927              	.L43:
 193:../Sources/main.c **** 											}
 194:../Sources/main.c **** 									 }
 195:../Sources/main.c **** 									 
 196:../Sources/main.c **** 									 //  Now look for the Right edge
 197:../Sources/main.c **** 									
 198:../Sources/main.c **** 									 for (i=44;i<124;i++)
 928              		.loc 1 198 0 is_stmt 1
 929 05ea 2C23     		mov	r3, #44
 930 05ec 8622     		mov	r2, #134
 931 05ee 9200     		lsl	r2, r2, #2
 932 05f0 D219     		add	r2, r2, r7
 933 05f2 1360     		str	r3, [r2]
 934 05f4 2EE0     		b	.L45
 935              	.L48:
 199:../Sources/main.c **** 									 {
 200:../Sources/main.c **** 											if ((LineScanTemp[i]-LineScanTemp[i+1]) > 400)
 936              		.loc 1 200 0
 937 05f6 384B     		ldr	r3, .L73+16
 938 05f8 8820     		mov	r0, #136
 939 05fa 8000     		lsl	r0, r0, #2
 940 05fc C019     		add	r0, r0, r7
 941 05fe C318     		add	r3, r0, r3
 942 0600 8621     		mov	r1, #134
 943 0602 8900     		lsl	r1, r1, #2
 944 0604 C919     		add	r1, r1, r7
 945 0606 0A68     		ldr	r2, [r1]
 946 0608 5200     		lsl	r2, r2, #1
 947 060a D35A     		ldrh	r3, [r2, r3]
 948 060c 1A1C     		mov	r2, r3
 949 060e 8620     		mov	r0, #134
 950 0610 8000     		lsl	r0, r0, #2
 951 0612 C019     		add	r0, r0, r7
 952 0614 0368     		ldr	r3, [r0]
 953 0616 591C     		add	r1, r3, #1
 954 0618 2F4B     		ldr	r3, .L73+16
 955 061a 8820     		mov	r0, #136
 956 061c 8000     		lsl	r0, r0, #2
 957 061e C019     		add	r0, r0, r7
 958 0620 C318     		add	r3, r0, r3
 959 0622 4900     		lsl	r1, r1, #1
 960 0624 CB5A     		ldrh	r3, [r1, r3]
 961 0626 D21A     		sub	r2, r2, r3
 962 0628 C823     		mov	r3, #200
 963 062a 5B00     		lsl	r3, r3, #1
 964 062c 9A42     		cmp	r2, r3
 965 062e 08DD     		ble	.L46
 201:../Sources/main.c **** 											{
 202:../Sources/main.c **** 												Redge = i;
 966              		.loc 1 202 0
 967 0630 8521     		mov	r1, #133
 968 0632 8900     		lsl	r1, r1, #2
 969 0634 7B18     		add	r3, r7, r1
 970 0636 8620     		mov	r0, #134
 971 0638 8000     		lsl	r0, r0, #2
 972 063a C019     		add	r0, r0, r7
 973 063c 0268     		ldr	r2, [r0]
 974 063e 1A80     		strh	r2, [r3]
 203:../Sources/main.c **** 												break;
 975              		.loc 1 203 0
 976 0640 0EE0     		b	.L47
 977              	.L46:
 198:../Sources/main.c **** 									 for (i=44;i<124;i++)
 978              		.loc 1 198 0
 979 0642 8621     		mov	r1, #134
 980 0644 8900     		lsl	r1, r1, #2
 981 0646 C919     		add	r1, r1, r7
 982 0648 0B68     		ldr	r3, [r1]
 983 064a 0133     		add	r3, r3, #1
 984 064c 8622     		mov	r2, #134
 985 064e 9200     		lsl	r2, r2, #2
 986 0650 D219     		add	r2, r2, r7
 987 0652 1360     		str	r3, [r2]
 988              	.L45:
 198:../Sources/main.c **** 									 for (i=44;i<124;i++)
 989              		.loc 1 198 0 is_stmt 0
 990 0654 8620     		mov	r0, #134
 991 0656 8000     		lsl	r0, r0, #2
 992 0658 C019     		add	r0, r0, r7
 993 065a 0368     		ldr	r3, [r0]
 994 065c 7B2B     		cmp	r3, #123
 995 065e CAD9     		bls	.L48
 996              	.L47:
 204:../Sources/main.c **** 											}
 205:../Sources/main.c **** 									 }
 206:../Sources/main.c **** 									 //  Now check for white space after edge
 207:../Sources/main.c **** 										GoodRedge = 0;
 997              		.loc 1 207 0 is_stmt 1
 998 0660 8421     		mov	r1, #132
 999 0662 8900     		lsl	r1, r1, #2
 1000 0664 7B18     		add	r3, r7, r1
 1001 0666 0022     		mov	r2, #0
 1002 0668 1A80     		strh	r2, [r3]
 208:../Sources/main.c **** 									 for (i=Redge;i<124;i++)
 1003              		.loc 1 208 0
 1004 066a 8522     		mov	r2, #133
 1005 066c 9200     		lsl	r2, r2, #2
 1006 066e BB18     		add	r3, r7, r2
 1007 0670 1B88     		ldrh	r3, [r3]
 1008 0672 8620     		mov	r0, #134
 1009 0674 8000     		lsl	r0, r0, #2
 1010 0676 C019     		add	r0, r0, r7
 1011 0678 0360     		str	r3, [r0]
 1012 067a 40E0     		b	.L49
 1013              	.L52:
 209:../Sources/main.c **** 									 {
 210:../Sources/main.c **** 											if ((LSarray[i] == 2000 )&&(LSarray[i+1] == 2000))  //need two points of white
 1014              		.loc 1 210 0
 1015 067c 184B     		ldr	r3, .L73+24
 1016 067e 8821     		mov	r1, #136
 1017 0680 8900     		lsl	r1, r1, #2
 1018 0682 C919     		add	r1, r1, r7
 1019 0684 CB18     		add	r3, r1, r3
 1020 0686 8620     		mov	r0, #134
 1021 0688 8000     		lsl	r0, r0, #2
 1022 068a C019     		add	r0, r0, r7
 1023 068c 0268     		ldr	r2, [r0]
 1024 068e 5200     		lsl	r2, r2, #1
 1025 0690 D25A     		ldrh	r2, [r2, r3]
 1026 0692 FA23     		mov	r3, #250
 1027 0694 DB00     		lsl	r3, r3, #3
 1028 0696 9A42     		cmp	r2, r3
 1029 0698 28D1     		bne	.L50
 1030              		.loc 1 210 0 is_stmt 0
 1031 069a 8621     		mov	r1, #134
 1032 069c 8900     		lsl	r1, r1, #2
 1033 069e C919     		add	r1, r1, r7
 1034 06a0 0B68     		ldr	r3, [r1]
 1035 06a2 5A1C     		add	r2, r3, #1
 1036 06a4 0E4B     		ldr	r3, .L73+24
 1037 06a6 8820     		mov	r0, #136
 1038 06a8 8000     		lsl	r0, r0, #2
 1039 06aa C019     		add	r0, r0, r7
 1040 06ac C318     		add	r3, r0, r3
 1041 06ae 5200     		lsl	r2, r2, #1
 1042 06b0 D25A     		ldrh	r2, [r2, r3]
 1043 06b2 FA23     		mov	r3, #250
 1044 06b4 DB00     		lsl	r3, r3, #3
 1045 06b6 9A42     		cmp	r2, r3
 1046 06b8 18D1     		bne	.L50
 211:../Sources/main.c **** 											{
 212:../Sources/main.c **** 												GoodRedge = 1;
 1047              		.loc 1 212 0 is_stmt 1
 1048 06ba 8421     		mov	r1, #132
 1049 06bc 8900     		lsl	r1, r1, #2
 1050 06be 7B18     		add	r3, r7, r1
 1051 06c0 0122     		mov	r2, #1
 1052 06c2 1A80     		strh	r2, [r3]
 213:../Sources/main.c **** 												break;
 1053              		.loc 1 213 0
 1054 06c4 21E0     		b	.L51
 1055              	.L74:
 1056 06c6 C046     		.align	3
 1057              	.L73:
 1058 06c8 00000000 		.word	0
 1059 06cc 00006040 		.word	1080033280
 1060 06d0 9A999999 		.word	-1717986918
 1061 06d4 9999E93F 		.word	1072273817
 1062 06d8 E0FEFFFF 		.word	-288
 1063 06dc 06020000 		.word	518
 1064 06e0 E0FDFFFF 		.word	-544
 1065 06e4 16020000 		.word	534
 1066 06e8 0E020000 		.word	526
 1067              	.L50:
 208:../Sources/main.c **** 									 for (i=Redge;i<124;i++)
 1068              		.loc 1 208 0
 1069 06ec 8622     		mov	r2, #134
 1070 06ee 9200     		lsl	r2, r2, #2
 1071 06f0 D219     		add	r2, r2, r7
 1072 06f2 1368     		ldr	r3, [r2]
 1073 06f4 0133     		add	r3, r3, #1
 1074 06f6 8620     		mov	r0, #134
 1075 06f8 8000     		lsl	r0, r0, #2
 1076 06fa C019     		add	r0, r0, r7
 1077 06fc 0360     		str	r3, [r0]
 1078              	.L49:
 208:../Sources/main.c **** 									 for (i=Redge;i<124;i++)
 1079              		.loc 1 208 0 is_stmt 0
 1080 06fe 8621     		mov	r1, #134
 1081 0700 8900     		lsl	r1, r1, #2
 1082 0702 C919     		add	r1, r1, r7
 1083 0704 0B68     		ldr	r3, [r1]
 1084 0706 7B2B     		cmp	r3, #123
 1085 0708 B8D9     		bls	.L52
 1086              	.L51:
 214:../Sources/main.c **** 											}
 215:../Sources/main.c **** 									 }
 216:../Sources/main.c **** 									 
 217:../Sources/main.c **** 									 
 218:../Sources/main.c **** 									 // Now set the 2 edges in LSarray so we can see them
 219:../Sources/main.c **** 									 LSarray[Redge] = 3500;
 1087              		.loc 1 219 0 is_stmt 1
 1088 070a 8522     		mov	r2, #133
 1089 070c 9200     		lsl	r2, r2, #2
 1090 070e BB18     		add	r3, r7, r2
 1091 0710 1A88     		ldrh	r2, [r3]
 1092 0712 AA4B     		ldr	r3, .L75
 1093 0714 8820     		mov	r0, #136
 1094 0716 8000     		lsl	r0, r0, #2
 1095 0718 C019     		add	r0, r0, r7
 1096 071a C318     		add	r3, r0, r3
 1097 071c 5200     		lsl	r2, r2, #1
 1098 071e A849     		ldr	r1, .L75+4
 1099 0720 D152     		strh	r1, [r2, r3]
 220:../Sources/main.c **** 									 LSarray[Ledge] = 2500;
 1100              		.loc 1 220 0
 1101 0722 A849     		ldr	r1, .L75+8
 1102 0724 7B18     		add	r3, r7, r1
 1103 0726 1A88     		ldrh	r2, [r3]
 1104 0728 A44B     		ldr	r3, .L75
 1105 072a 8820     		mov	r0, #136
 1106 072c 8000     		lsl	r0, r0, #2
 1107 072e C019     		add	r0, r0, r7
 1108 0730 C318     		add	r3, r0, r3
 1109 0732 5200     		lsl	r2, r2, #1
 1110 0734 A449     		ldr	r1, .L75+12
 1111 0736 D152     		strh	r1, [r2, r3]
 221:../Sources/main.c **** 									 LSarray[127-GoodRedge] = 400;
 1112              		.loc 1 221 0
 1113 0738 8421     		mov	r1, #132
 1114 073a 8900     		lsl	r1, r1, #2
 1115 073c 7B18     		add	r3, r7, r1
 1116 073e 1B88     		ldrh	r3, [r3]
 1117 0740 7F22     		mov	r2, #127
 1118 0742 D21A     		sub	r2, r2, r3
 1119 0744 9D4B     		ldr	r3, .L75
 1120 0746 8820     		mov	r0, #136
 1121 0748 8000     		lsl	r0, r0, #2
 1122 074a C019     		add	r0, r0, r7
 1123 074c C318     		add	r3, r0, r3
 1124 074e 5200     		lsl	r2, r2, #1
 1125 0750 C821     		mov	r1, #200
 1126 0752 4900     		lsl	r1, r1, #1
 1127 0754 D152     		strh	r1, [r2, r3]
 222:../Sources/main.c **** 									 LSarray[GoodLedge] = 200;					 
 1128              		.loc 1 222 0
 1129 0756 9D49     		ldr	r1, .L75+16
 1130 0758 7B18     		add	r3, r7, r1
 1131 075a 1A88     		ldrh	r2, [r3]
 1132 075c 974B     		ldr	r3, .L75
 1133 075e 8820     		mov	r0, #136
 1134 0760 8000     		lsl	r0, r0, #2
 1135 0762 C019     		add	r0, r0, r7
 1136 0764 C318     		add	r3, r0, r3
 1137 0766 5200     		lsl	r2, r2, #1
 1138 0768 C821     		mov	r1, #200
 1139 076a D152     		strh	r1, [r2, r3]
 223:../Sources/main.c **** 									 
 224:../Sources/main.c **** 									 //Calculate distance between lines
 225:../Sources/main.c **** 									 Delta = Redge-Ledge;
 1140              		.loc 1 225 0
 1141 076c 8521     		mov	r1, #133
 1142 076e 8900     		lsl	r1, r1, #2
 1143 0770 7B18     		add	r3, r7, r1
 1144 0772 1A88     		ldrh	r2, [r3]
 1145 0774 9348     		ldr	r0, .L75+8
 1146 0776 3B18     		add	r3, r7, r0
 1147 0778 1B88     		ldrh	r3, [r3]
 1148 077a D31A     		sub	r3, r2, r3
 1149 077c 8021     		mov	r1, #128
 1150 077e 8900     		lsl	r1, r1, #2
 1151 0780 C919     		add	r1, r1, r7
 1152 0782 0B60     		str	r3, [r1]
 226:../Sources/main.c **** 									 LSarray[Delta] += 150;
 1153              		.loc 1 226 0
 1154 0784 8D4B     		ldr	r3, .L75
 1155 0786 8822     		mov	r2, #136
 1156 0788 9200     		lsl	r2, r2, #2
 1157 078a D219     		add	r2, r2, r7
 1158 078c D318     		add	r3, r2, r3
 1159 078e 8020     		mov	r0, #128
 1160 0790 8000     		lsl	r0, r0, #2
 1161 0792 C019     		add	r0, r0, r7
 1162 0794 0268     		ldr	r2, [r0]
 1163 0796 5200     		lsl	r2, r2, #1
 1164 0798 D35A     		ldrh	r3, [r2, r3]
 1165 079a 9633     		add	r3, r3, #150
 1166 079c 99B2     		uxth	r1, r3
 1167 079e 874B     		ldr	r3, .L75
 1168 07a0 8822     		mov	r2, #136
 1169 07a2 9200     		lsl	r2, r2, #2
 1170 07a4 D219     		add	r2, r2, r7
 1171 07a6 D318     		add	r3, r2, r3
 1172 07a8 8020     		mov	r0, #128
 1173 07aa 8000     		lsl	r0, r0, #2
 1174 07ac C019     		add	r0, r0, r7
 1175 07ae 0268     		ldr	r2, [r0]
 1176 07b0 5200     		lsl	r2, r2, #1
 1177 07b2 D152     		strh	r1, [r2, r3]
 227:../Sources/main.c **** 									 //calculate center
 228:../Sources/main.c **** 									 Center = Ledge + ((Redge - Ledge)/2);
 1178              		.loc 1 228 0
 1179 07b4 8521     		mov	r1, #133
 1180 07b6 8900     		lsl	r1, r1, #2
 1181 07b8 7B18     		add	r3, r7, r1
 1182 07ba 1A88     		ldrh	r2, [r3]
 1183 07bc 8148     		ldr	r0, .L75+8
 1184 07be 3B18     		add	r3, r7, r0
 1185 07c0 1B88     		ldrh	r3, [r3]
 1186 07c2 D31A     		sub	r3, r2, r3
 1187 07c4 00D5     		bpl	.L53
 1188 07c6 0133     		add	r3, r3, #1
 1189              	.L53:
 1190 07c8 5B10     		asr	r3, r3, #1
 1191 07ca 99B2     		uxth	r1, r3
 1192 07cc 804A     		ldr	r2, .L75+20
 1193 07ce BB18     		add	r3, r7, r2
 1194 07d0 7C48     		ldr	r0, .L75+8
 1195 07d2 3A18     		add	r2, r7, r0
 1196 07d4 1288     		ldrh	r2, [r2]
 1197 07d6 8A18     		add	r2, r1, r2
 1198 07d8 1A80     		strh	r2, [r3]
 229:../Sources/main.c **** 									 if (Ledge <= 5)  Center = Redge - 40;
 1199              		.loc 1 229 0
 1200 07da 7A49     		ldr	r1, .L75+8
 1201 07dc 7B18     		add	r3, r7, r1
 1202 07de 1B88     		ldrh	r3, [r3]
 1203 07e0 052B     		cmp	r3, #5
 1204 07e2 07D8     		bhi	.L54
 1205              		.loc 1 229 0 is_stmt 0
 1206 07e4 7A4A     		ldr	r2, .L75+20
 1207 07e6 BB18     		add	r3, r7, r2
 1208 07e8 8520     		mov	r0, #133
 1209 07ea 8000     		lsl	r0, r0, #2
 1210 07ec 3A18     		add	r2, r7, r0
 1211 07ee 1288     		ldrh	r2, [r2]
 1212 07f0 283A     		sub	r2, r2, #40
 1213 07f2 1A80     		strh	r2, [r3]
 1214              	.L54:
 230:../Sources/main.c **** 									 if (Redge >=123)  Center = Ledge + 40;
 1215              		.loc 1 230 0 is_stmt 1
 1216 07f4 8521     		mov	r1, #133
 1217 07f6 8900     		lsl	r1, r1, #2
 1218 07f8 7B18     		add	r3, r7, r1
 1219 07fa 1B88     		ldrh	r3, [r3]
 1220 07fc 7A2B     		cmp	r3, #122
 1221 07fe 06D9     		bls	.L55
 1222              		.loc 1 230 0 is_stmt 0
 1223 0800 734A     		ldr	r2, .L75+20
 1224 0802 BB18     		add	r3, r7, r2
 1225 0804 6F48     		ldr	r0, .L75+8
 1226 0806 3A18     		add	r2, r7, r0
 1227 0808 1288     		ldrh	r2, [r2]
 1228 080a 2832     		add	r2, r2, #40
 1229 080c 1A80     		strh	r2, [r3]
 1230              	.L55:
 231:../Sources/main.c **** 									 LSarray[Center] = 4000;
 1231              		.loc 1 231 0 is_stmt 1
 1232 080e 7049     		ldr	r1, .L75+20
 1233 0810 7B18     		add	r3, r7, r1
 1234 0812 1A88     		ldrh	r2, [r3]
 1235 0814 694B     		ldr	r3, .L75
 1236 0816 8820     		mov	r0, #136
 1237 0818 8000     		lsl	r0, r0, #2
 1238 081a C019     		add	r0, r0, r7
 1239 081c C318     		add	r3, r0, r3
 1240 081e 5200     		lsl	r2, r2, #1
 1241 0820 FA21     		mov	r1, #250
 1242 0822 0901     		lsl	r1, r1, #4
 1243 0824 D152     		strh	r1, [r2, r3]
 232:../Sources/main.c **** 									 
 233:../Sources/main.c **** 									 	if(t==0)
 1244              		.loc 1 233 0
 1245 0826 8721     		mov	r1, #135
 1246 0828 8900     		lsl	r1, r1, #2
 1247 082a C919     		add	r1, r1, r7
 1248 082c 0B68     		ldr	r3, [r1]
 1249 082e 002B     		cmp	r3, #0
 1250 0830 05D1     		bne	.L56
 234:../Sources/main.c **** 									 		t=3;
 1251              		.loc 1 234 0
 1252 0832 0323     		mov	r3, #3
 1253 0834 8722     		mov	r2, #135
 1254 0836 9200     		lsl	r2, r2, #2
 1255 0838 D219     		add	r2, r2, r7
 1256 083a 1360     		str	r3, [r2]
 1257 083c 08E0     		b	.L57
 1258              	.L56:
 235:../Sources/main.c **** 									 	else
 236:../Sources/main.c **** 									 		t--;
 1259              		.loc 1 236 0
 1260 083e 8720     		mov	r0, #135
 1261 0840 8000     		lsl	r0, r0, #2
 1262 0842 C019     		add	r0, r0, r7
 1263 0844 0368     		ldr	r3, [r0]
 1264 0846 013B     		sub	r3, r3, #1
 1265 0848 8721     		mov	r1, #135
 1266 084a 8900     		lsl	r1, r1, #2
 1267 084c C919     		add	r1, r1, r7
 1268 084e 0B60     		str	r3, [r1]
 1269              	.L57:
 237:../Sources/main.c **** 									 	
 238:../Sources/main.c **** 										 TFC_SetBatteryLED_Level(t);					 
 1270              		.loc 1 238 0
 1271 0850 8722     		mov	r2, #135
 1272 0852 9200     		lsl	r2, r2, #2
 1273 0854 D219     		add	r2, r2, r7
 1274 0856 1368     		ldr	r3, [r2]
 1275 0858 DBB2     		uxtb	r3, r3
 1276 085a 181C     		mov	r0, r3
 1277 085c FFF7FEFF 		bl	TFC_SetBatteryLED_Level
 239:../Sources/main.c **** 										 TERMINAL_PRINTF("\r\n");
 1278              		.loc 1 239 0
 1279 0860 5C4A     		ldr	r2, .L75+24
 1280 0862 5D4B     		ldr	r3, .L75+28
 1281 0864 101C     		mov	r0, r2
 1282 0866 191C     		mov	r1, r3
 1283 0868 FFF7FEFF 		bl	Qprintf
 240:../Sources/main.c **** 										 TERMINAL_PRINTF("L:");						
 1284              		.loc 1 240 0
 1285 086c 594A     		ldr	r2, .L75+24
 1286 086e 5B4B     		ldr	r3, .L75+32
 1287 0870 101C     		mov	r0, r2
 1288 0872 191C     		mov	r1, r3
 1289 0874 FFF7FEFF 		bl	Qprintf
 241:../Sources/main.c **** 										 for(i=0;i<128;i++)
 1290              		.loc 1 241 0
 1291 0878 0023     		mov	r3, #0
 1292 087a 8620     		mov	r0, #134
 1293 087c 8000     		lsl	r0, r0, #2
 1294 087e C019     		add	r0, r0, r7
 1295 0880 0360     		str	r3, [r0]
 1296 0882 1AE0     		b	.L58
 1297              	.L59:
 242:../Sources/main.c **** 										 {
 243:../Sources/main.c **** 												 TERMINAL_PRINTF("%X,",LineScanTemp[i]);
 1298              		.loc 1 243 0
 1299 0884 564B     		ldr	r3, .L75+36
 1300 0886 8821     		mov	r1, #136
 1301 0888 8900     		lsl	r1, r1, #2
 1302 088a C919     		add	r1, r1, r7
 1303 088c CB18     		add	r3, r1, r3
 1304 088e 8620     		mov	r0, #134
 1305 0890 8000     		lsl	r0, r0, #2
 1306 0892 C019     		add	r0, r0, r7
 1307 0894 0268     		ldr	r2, [r0]
 1308 0896 5200     		lsl	r2, r2, #1
 1309 0898 D35A     		ldrh	r3, [r2, r3]
 1310 089a 4E49     		ldr	r1, .L75+24
 1311 089c 514A     		ldr	r2, .L75+40
 1312 089e 081C     		mov	r0, r1
 1313 08a0 111C     		mov	r1, r2
 1314 08a2 1A1C     		mov	r2, r3
 1315 08a4 FFF7FEFF 		bl	Qprintf
 241:../Sources/main.c **** 										 for(i=0;i<128;i++)
 1316              		.loc 1 241 0
 1317 08a8 8621     		mov	r1, #134
 1318 08aa 8900     		lsl	r1, r1, #2
 1319 08ac C919     		add	r1, r1, r7
 1320 08ae 0B68     		ldr	r3, [r1]
 1321 08b0 0133     		add	r3, r3, #1
 1322 08b2 8622     		mov	r2, #134
 1323 08b4 9200     		lsl	r2, r2, #2
 1324 08b6 D219     		add	r2, r2, r7
 1325 08b8 1360     		str	r3, [r2]
 1326              	.L58:
 241:../Sources/main.c **** 										 for(i=0;i<128;i++)
 1327              		.loc 1 241 0 is_stmt 0
 1328 08ba 8620     		mov	r0, #134
 1329 08bc 8000     		lsl	r0, r0, #2
 1330 08be C019     		add	r0, r0, r7
 1331 08c0 0368     		ldr	r3, [r0]
 1332 08c2 7F2B     		cmp	r3, #127
 1333 08c4 DED9     		bls	.L59
 244:../Sources/main.c **** 										 }
 245:../Sources/main.c **** 										
 246:../Sources/main.c **** 										 for(i=0;i<128;i++)
 1334              		.loc 1 246 0 is_stmt 1
 1335 08c6 0023     		mov	r3, #0
 1336 08c8 8621     		mov	r1, #134
 1337 08ca 8900     		lsl	r1, r1, #2
 1338 08cc C919     		add	r1, r1, r7
 1339 08ce 0B60     		str	r3, [r1]
 1340 08d0 45E0     		b	.L60
 1341              	.L63:
 247:../Sources/main.c **** 										 {
 248:../Sources/main.c **** 												 TERMINAL_PRINTF("%X",LSarray[i]);
 1342              		.loc 1 248 0
 1343 08d2 3A4B     		ldr	r3, .L75
 1344 08d4 8822     		mov	r2, #136
 1345 08d6 9200     		lsl	r2, r2, #2
 1346 08d8 D219     		add	r2, r2, r7
 1347 08da D318     		add	r3, r2, r3
 1348 08dc 8620     		mov	r0, #134
 1349 08de 8000     		lsl	r0, r0, #2
 1350 08e0 C019     		add	r0, r0, r7
 1351 08e2 0268     		ldr	r2, [r0]
 1352 08e4 5200     		lsl	r2, r2, #1
 1353 08e6 D35A     		ldrh	r3, [r2, r3]
 1354 08e8 3A49     		ldr	r1, .L75+24
 1355 08ea 3F4A     		ldr	r2, .L75+44
 1356 08ec 081C     		mov	r0, r1
 1357 08ee 111C     		mov	r1, r2
 1358 08f0 1A1C     		mov	r2, r3
 1359 08f2 FFF7FEFF 		bl	Qprintf
 249:../Sources/main.c **** 												 if(i==127)
 1360              		.loc 1 249 0
 1361 08f6 8621     		mov	r1, #134
 1362 08f8 8900     		lsl	r1, r1, #2
 1363 08fa C919     		add	r1, r1, r7
 1364 08fc 0B68     		ldr	r3, [r1]
 1365 08fe 7F2B     		cmp	r3, #127
 1366 0900 12D1     		bne	.L61
 250:../Sources/main.c **** 													 TERMINAL_PRINTF("\r\n",LSarray[i]);
 1367              		.loc 1 250 0
 1368 0902 2E4B     		ldr	r3, .L75
 1369 0904 8822     		mov	r2, #136
 1370 0906 9200     		lsl	r2, r2, #2
 1371 0908 D219     		add	r2, r2, r7
 1372 090a D318     		add	r3, r2, r3
 1373 090c 8620     		mov	r0, #134
 1374 090e 8000     		lsl	r0, r0, #2
 1375 0910 C019     		add	r0, r0, r7
 1376 0912 0268     		ldr	r2, [r0]
 1377 0914 5200     		lsl	r2, r2, #1
 1378 0916 D35A     		ldrh	r3, [r2, r3]
 1379 0918 2E49     		ldr	r1, .L75+24
 1380 091a 2F4A     		ldr	r2, .L75+28
 1381 091c 081C     		mov	r0, r1
 1382 091e 111C     		mov	r1, r2
 1383 0920 1A1C     		mov	r2, r3
 1384 0922 FFF7FEFF 		bl	Qprintf
 1385 0926 11E0     		b	.L62
 1386              	.L61:
 251:../Sources/main.c **** 												 else
 252:../Sources/main.c **** 													 TERMINAL_PRINTF(",",LSarray[i]);
 1387              		.loc 1 252 0
 1388 0928 244B     		ldr	r3, .L75
 1389 092a 8821     		mov	r1, #136
 1390 092c 8900     		lsl	r1, r1, #2
 1391 092e C919     		add	r1, r1, r7
 1392 0930 CB18     		add	r3, r1, r3
 1393 0932 8620     		mov	r0, #134
 1394 0934 8000     		lsl	r0, r0, #2
 1395 0936 C019     		add	r0, r0, r7
 1396 0938 0268     		ldr	r2, [r0]
 1397 093a 5200     		lsl	r2, r2, #1
 1398 093c D35A     		ldrh	r3, [r2, r3]
 1399 093e 2549     		ldr	r1, .L75+24
 1400 0940 2A4A     		ldr	r2, .L75+48
 1401 0942 081C     		mov	r0, r1
 1402 0944 111C     		mov	r1, r2
 1403 0946 1A1C     		mov	r2, r3
 1404 0948 FFF7FEFF 		bl	Qprintf
 1405              	.L62:
 246:../Sources/main.c **** 										 for(i=0;i<128;i++)
 1406              		.loc 1 246 0
 1407 094c 8621     		mov	r1, #134
 1408 094e 8900     		lsl	r1, r1, #2
 1409 0950 C919     		add	r1, r1, r7
 1410 0952 0B68     		ldr	r3, [r1]
 1411 0954 0133     		add	r3, r3, #1
 1412 0956 8622     		mov	r2, #134
 1413 0958 9200     		lsl	r2, r2, #2
 1414 095a D219     		add	r2, r2, r7
 1415 095c 1360     		str	r3, [r2]
 1416              	.L60:
 246:../Sources/main.c **** 										 for(i=0;i<128;i++)
 1417              		.loc 1 246 0 is_stmt 0
 1418 095e 8620     		mov	r0, #134
 1419 0960 8000     		lsl	r0, r0, #2
 1420 0962 C019     		add	r0, r0, r7
 1421 0964 0368     		ldr	r3, [r0]
 1422 0966 7F2B     		cmp	r3, #127
 1423 0968 B3D9     		bls	.L63
 1424              	.L28:
 253:../Sources/main.c **** 										}										
 254:../Sources/main.c **** 											
 255:../Sources/main.c **** 									}
 256:../Sources/main.c **** 				if((Center >= 58) && (Center <= 69)){
 1425              		.loc 1 256 0 is_stmt 1
 1426 096a 1949     		ldr	r1, .L75+20
 1427 096c 7B18     		add	r3, r7, r1
 1428 096e 1B88     		ldrh	r3, [r3]
 1429 0970 392B     		cmp	r3, #57
 1430 0972 0DD9     		bls	.L64
 1431              		.loc 1 256 0 is_stmt 0
 1432 0974 164A     		ldr	r2, .L75+20
 1433 0976 BB18     		add	r3, r7, r2
 1434 0978 1B88     		ldrh	r3, [r3]
 1435 097a 452B     		cmp	r3, #69
 1436 097c 08D8     		bhi	.L64
 257:../Sources/main.c **** 				Center = CSetpoint;
 1437              		.loc 1 257 0 is_stmt 1
 1438 097e 1C4B     		ldr	r3, .L75+52
 1439 0980 1B68     		ldr	r3, [r3]
 1440 0982 1348     		ldr	r0, .L75+20
 1441 0984 3C18     		add	r4, r7, r0
 1442 0986 181C     		add	r0, r3, #0
 1443 0988 FFF7FEFF 		bl	__aeabi_f2uiz
 1444 098c 031C     		mov	r3, r0
 1445 098e 2380     		strh	r3, [r4]
 1446              	.L64:
 258:../Sources/main.c **** 				}
 259:../Sources/main.c **** 					CInput = Center;
 1447              		.loc 1 259 0
 1448 0990 0F49     		ldr	r1, .L75+20
 1449 0992 7B18     		add	r3, r7, r1
 1450 0994 1B88     		ldrh	r3, [r3]
 1451 0996 181C     		mov	r0, r3
 1452 0998 FFF7FEFF 		bl	__aeabi_ui2f
 1453 099c 021C     		add	r2, r0, #0
 1454 099e 154B     		ldr	r3, .L75+56
 1455 09a0 1A60     		str	r2, [r3]
 260:../Sources/main.c **** 						
 261:../Sources/main.c **** 						Compute();
 1456              		.loc 1 261 0
 1457 09a2 FFF7FEFF 		bl	Compute
 262:../Sources/main.c **** 						
 263:../Sources/main.c **** 						
 264:../Sources/main.c **** 						TFC_SetServo(0,COutput);
 1458              		.loc 1 264 0
 1459 09a6 144B     		ldr	r3, .L75+60
 1460 09a8 1B68     		ldr	r3, [r3]
 1461 09aa 0020     		mov	r0, #0
 1462 09ac 191C     		add	r1, r3, #0
 1463 09ae FFF7FEFF 		bl	TFC_SetServo
 265:../Sources/main.c **** 				break;
 1464              		.loc 1 265 0
 1465 09b2 00E0     		b	.L22
 1466              	.L70:
 125:../Sources/main.c **** 				break;
 1467              		.loc 1 125 0
 1468 09b4 C046     		mov	r8, r8
 1469              	.L22:
 266:../Sources/main.c **** 				
 267:../Sources/main.c **** 			}   //end of Case
 268:../Sources/main.c **** 			
 269:../Sources/main.c **** 			
 270:../Sources/main.c **** 			
 271:../Sources/main.c **** 	}   // end of infinite for
 1470              		.loc 1 271 0
 1471 09b6 FFF782FB 		bl	.L65	@ far jump
 1472              	.L76:
 1473 09ba C046     		.align	2
 1474              	.L75:
 1475 09bc E0FDFFFF 		.word	-544
 1476 09c0 AC0D0000 		.word	3500
 1477 09c4 16020000 		.word	534
 1478 09c8 C4090000 		.word	2500
 1479 09cc 0E020000 		.word	526
 1480 09d0 12020000 		.word	530
 1481 09d4 00000000 		.word	SDA_SERIAL_OUTGOING_QUEUE
 1482 09d8 00000000 		.word	.LC10
 1483 09dc 04000000 		.word	.LC12
 1484 09e0 E0FEFFFF 		.word	-288
 1485 09e4 08000000 		.word	.LC14
 1486 09e8 0C000000 		.word	.LC16
 1487 09ec 10000000 		.word	.LC18
 1488 09f0 00000000 		.word	CSetpoint
 1489 09f4 00000000 		.word	CInput
 1490 09f8 00000000 		.word	COutput
 1491              		.cfi_endproc
 1492              	.LFE0:
 1494              		.global	__aeabi_fsub
 1495              		.global	__aeabi_fmul
 1496              		.global	__aeabi_fcmpgt
 1497              		.global	__aeabi_fcmplt
 1498 09fc C046C046 		.section	.text.Compute,"ax",%progbits
 1499              		.align	2
 1500              		.global	Compute
 1501              		.code	16
 1502              		.thumb_func
 1504              	Compute:
 1505              	.LFB1:
 272:../Sources/main.c **** 	
 273:../Sources/main.c **** 	return 0;
 274:../Sources/main.c **** }  // end of main
 275:../Sources/main.c **** 
 276:../Sources/main.c **** 
 277:../Sources/main.c **** 
 278:../Sources/main.c ****  
 279:../Sources/main.c **** void Compute()
 280:../Sources/main.c **** {
 1506              		.loc 1 280 0
 1507              		.cfi_startproc
 1508 0000 90B5     		push	{r4, r7, lr}
 1509              	.LCFI3:
 1510              		.cfi_def_cfa_offset 12
 1511              		.cfi_offset 4, -12
 1512              		.cfi_offset 7, -8
 1513              		.cfi_offset 14, -4
 1514 0002 83B0     		sub	sp, sp, #12
 1515              	.LCFI4:
 1516              		.cfi_def_cfa_offset 24
 1517 0004 00AF     		add	r7, sp, #0
 1518              	.LCFI5:
 1519              		.cfi_def_cfa_register 7
 281:../Sources/main.c **** 	float CdInput;
 282:../Sources/main.c ****       /*Compute all the working error variables*/
 283:../Sources/main.c ****       Cerror = CSetpoint - CInput;
 1520              		.loc 1 283 0
 1521 0006 4B4B     		ldr	r3, .L92
 1522 0008 1A68     		ldr	r2, [r3]
 1523 000a 4B4B     		ldr	r3, .L92+4
 1524 000c 1B68     		ldr	r3, [r3]
 1525 000e 101C     		add	r0, r2, #0
 1526 0010 191C     		add	r1, r3, #0
 1527 0012 FFF7FEFF 		bl	__aeabi_fsub
 1528 0016 031C     		add	r3, r0, #0
 1529 0018 1A1C     		add	r2, r3, #0
 1530 001a 484B     		ldr	r3, .L92+8
 1531 001c 1A60     		str	r2, [r3]
 284:../Sources/main.c ****       CITerm += (Cki * Cerror);
 1532              		.loc 1 284 0
 1533 001e 484B     		ldr	r3, .L92+12
 1534 0020 1A68     		ldr	r2, [r3]
 1535 0022 464B     		ldr	r3, .L92+8
 1536 0024 1B68     		ldr	r3, [r3]
 1537 0026 101C     		add	r0, r2, #0
 1538 0028 191C     		add	r1, r3, #0
 1539 002a FFF7FEFF 		bl	__aeabi_fmul
 1540 002e 031C     		add	r3, r0, #0
 1541 0030 1A1C     		add	r2, r3, #0
 1542 0032 444B     		ldr	r3, .L92+16
 1543 0034 1B68     		ldr	r3, [r3]
 1544 0036 101C     		add	r0, r2, #0
 1545 0038 191C     		add	r1, r3, #0
 1546 003a FFF7FEFF 		bl	__aeabi_fadd
 1547 003e 031C     		add	r3, r0, #0
 1548 0040 1A1C     		add	r2, r3, #0
 1549 0042 404B     		ldr	r3, .L92+16
 1550 0044 1A60     		str	r2, [r3]
 285:../Sources/main.c ****       if(CITerm > CoutMax) 
 1551              		.loc 1 285 0
 1552 0046 3F4B     		ldr	r3, .L92+16
 1553 0048 1A68     		ldr	r2, [r3]
 1554 004a 3F4B     		ldr	r3, .L92+20
 1555 004c 1B68     		ldr	r3, [r3]
 1556 004e 101C     		add	r0, r2, #0
 1557 0050 191C     		add	r1, r3, #0
 1558 0052 FFF7FEFF 		bl	__aeabi_fcmpgt
 1559 0056 031C     		mov	r3, r0
 1560 0058 002B     		cmp	r3, #0
 1561 005a 04D0     		beq	.L90
 1562              	.L86:
 286:../Sources/main.c ****     	  CITerm = CoutMax;
 1563              		.loc 1 286 0
 1564 005c 3A4B     		ldr	r3, .L92+20
 1565 005e 1A68     		ldr	r2, [r3]
 1566 0060 384B     		ldr	r3, .L92+16
 1567 0062 1A60     		str	r2, [r3]
 1568 0064 0EE0     		b	.L80
 1569              	.L90:
 287:../Sources/main.c ****       else if(CITerm < CoutMin) 
 1570              		.loc 1 287 0
 1571 0066 374B     		ldr	r3, .L92+16
 1572 0068 1A68     		ldr	r2, [r3]
 1573 006a 384B     		ldr	r3, .L92+24
 1574 006c 1B68     		ldr	r3, [r3]
 1575 006e 101C     		add	r0, r2, #0
 1576 0070 191C     		add	r1, r3, #0
 1577 0072 FFF7FEFF 		bl	__aeabi_fcmplt
 1578 0076 031C     		mov	r3, r0
 1579 0078 002B     		cmp	r3, #0
 1580 007a 03D0     		beq	.L80
 1581              	.L87:
 288:../Sources/main.c ****     	  CITerm = CoutMin;
 1582              		.loc 1 288 0
 1583 007c 334B     		ldr	r3, .L92+24
 1584 007e 1A68     		ldr	r2, [r3]
 1585 0080 304B     		ldr	r3, .L92+16
 1586 0082 1A60     		str	r2, [r3]
 1587              	.L80:
 289:../Sources/main.c ****       CdInput = (CInput - ClastInput);
 1588              		.loc 1 289 0
 1589 0084 2C4B     		ldr	r3, .L92+4
 1590 0086 1A68     		ldr	r2, [r3]
 1591 0088 314B     		ldr	r3, .L92+28
 1592 008a 1B68     		ldr	r3, [r3]
 1593 008c 101C     		add	r0, r2, #0
 1594 008e 191C     		add	r1, r3, #0
 1595 0090 FFF7FEFF 		bl	__aeabi_fsub
 1596 0094 031C     		add	r3, r0, #0
 1597 0096 7B60     		str	r3, [r7, #4]
 290:../Sources/main.c ****  
 291:../Sources/main.c ****       /*Compute PID Output*/
 292:../Sources/main.c ****       COutput = Ckp * Cerror + CITerm- Ckd * CdInput;
 1598              		.loc 1 292 0
 1599 0098 2E4B     		ldr	r3, .L92+32
 1600 009a 1A68     		ldr	r2, [r3]
 1601 009c 274B     		ldr	r3, .L92+8
 1602 009e 1B68     		ldr	r3, [r3]
 1603 00a0 101C     		add	r0, r2, #0
 1604 00a2 191C     		add	r1, r3, #0
 1605 00a4 FFF7FEFF 		bl	__aeabi_fmul
 1606 00a8 031C     		add	r3, r0, #0
 1607 00aa 1A1C     		add	r2, r3, #0
 1608 00ac 254B     		ldr	r3, .L92+16
 1609 00ae 1B68     		ldr	r3, [r3]
 1610 00b0 101C     		add	r0, r2, #0
 1611 00b2 191C     		add	r1, r3, #0
 1612 00b4 FFF7FEFF 		bl	__aeabi_fadd
 1613 00b8 031C     		add	r3, r0, #0
 1614 00ba 1C1C     		add	r4, r3, #0
 1615 00bc 264B     		ldr	r3, .L92+36
 1616 00be 1B68     		ldr	r3, [r3]
 1617 00c0 181C     		add	r0, r3, #0
 1618 00c2 7968     		ldr	r1, [r7, #4]
 1619 00c4 FFF7FEFF 		bl	__aeabi_fmul
 1620 00c8 031C     		add	r3, r0, #0
 1621 00ca 201C     		add	r0, r4, #0
 1622 00cc 191C     		add	r1, r3, #0
 1623 00ce FFF7FEFF 		bl	__aeabi_fsub
 1624 00d2 031C     		add	r3, r0, #0
 1625 00d4 1A1C     		add	r2, r3, #0
 1626 00d6 214B     		ldr	r3, .L92+40
 1627 00d8 1A60     		str	r2, [r3]
 293:../Sources/main.c ****       if(COutput > CoutMax)  
 1628              		.loc 1 293 0
 1629 00da 204B     		ldr	r3, .L92+40
 1630 00dc 1A68     		ldr	r2, [r3]
 1631 00de 1A4B     		ldr	r3, .L92+20
 1632 00e0 1B68     		ldr	r3, [r3]
 1633 00e2 101C     		add	r0, r2, #0
 1634 00e4 191C     		add	r1, r3, #0
 1635 00e6 FFF7FEFF 		bl	__aeabi_fcmpgt
 1636 00ea 031C     		mov	r3, r0
 1637 00ec 002B     		cmp	r3, #0
 1638 00ee 07D0     		beq	.L91
 1639              	.L88:
 294:../Sources/main.c ****     	  COutput = -CoutMax;
 1640              		.loc 1 294 0
 1641 00f0 154B     		ldr	r3, .L92+20
 1642 00f2 1B68     		ldr	r3, [r3]
 1643 00f4 8022     		mov	r2, #128
 1644 00f6 1206     		lsl	r2, r2, #24
 1645 00f8 5A40     		eor	r2, r3
 1646 00fa 184B     		ldr	r3, .L92+40
 1647 00fc 1A60     		str	r2, [r3]
 1648 00fe 11E0     		b	.L84
 1649              	.L91:
 295:../Sources/main.c ****       else if(COutput < CoutMin)
 1650              		.loc 1 295 0
 1651 0100 164B     		ldr	r3, .L92+40
 1652 0102 1A68     		ldr	r2, [r3]
 1653 0104 114B     		ldr	r3, .L92+24
 1654 0106 1B68     		ldr	r3, [r3]
 1655 0108 101C     		add	r0, r2, #0
 1656 010a 191C     		add	r1, r3, #0
 1657 010c FFF7FEFF 		bl	__aeabi_fcmplt
 1658 0110 031C     		mov	r3, r0
 1659 0112 002B     		cmp	r3, #0
 1660 0114 06D0     		beq	.L84
 1661              	.L89:
 296:../Sources/main.c ****     	  COutput = -CoutMin;
 1662              		.loc 1 296 0
 1663 0116 0D4B     		ldr	r3, .L92+24
 1664 0118 1B68     		ldr	r3, [r3]
 1665 011a 8022     		mov	r2, #128
 1666 011c 1206     		lsl	r2, r2, #24
 1667 011e 5A40     		eor	r2, r3
 1668 0120 0E4B     		ldr	r3, .L92+40
 1669 0122 1A60     		str	r2, [r3]
 1670              	.L84:
 297:../Sources/main.c **** 
 298:../Sources/main.c ****       /*Remember some variables for next time*/
 299:../Sources/main.c ****       ClastInput = CInput;
 1671              		.loc 1 299 0
 1672 0124 044B     		ldr	r3, .L92+4
 1673 0126 1A68     		ldr	r2, [r3]
 1674 0128 094B     		ldr	r3, .L92+28
 1675 012a 1A60     		str	r2, [r3]
 300:../Sources/main.c ****   
 301:../Sources/main.c **** }
 1676              		.loc 1 301 0
 1677 012c BD46     		mov	sp, r7
 1678 012e 03B0     		add	sp, sp, #12
 1679              		@ sp needed for prologue
 1680 0130 90BD     		pop	{r4, r7, pc}
 1681              	.L93:
 1682 0132 C046     		.align	2
 1683              	.L92:
 1684 0134 00000000 		.word	CSetpoint
 1685 0138 00000000 		.word	CInput
 1686 013c 00000000 		.word	Cerror
 1687 0140 00000000 		.word	Cki
 1688 0144 00000000 		.word	CITerm
 1689 0148 00000000 		.word	CoutMax
 1690 014c 00000000 		.word	CoutMin
 1691 0150 00000000 		.word	ClastInput
 1692 0154 00000000 		.word	Ckp
 1693 0158 00000000 		.word	Ckd
 1694 015c 00000000 		.word	COutput
 1695              		.cfi_endproc
 1696              	.LFE1:
 1698              		.text
 1699              	.Letext0:
 1700              		.file 2 "D:/Freescale/CW MCU v10.7/MCU/ARM_GCC_Support/ewl/EWL_C/include/cstdint"
 1701              		.file 3 "C:/Users/Joshua Edwards/workspace/Cup Car Lab A/Project_Headers/MKL25Z4.h"
 1702              		.file 4 "C:/Users/Joshua Edwards/workspace/Cup Car Lab A/Project_Headers/TFC\\TFC_Queue.h"
 1703              		.file 5 "C:/Users/Joshua Edwards/workspace/Cup Car Lab A/Project_Headers/TFC\\TFC_ARM_SysTick.h"
 1704              		.file 6 "C:/Users/Joshua Edwards/workspace/Cup Car Lab A/Project_Headers/TFC\\TFC_LineScanCamera.h
 1705              		.file 7 "C:/Users/Joshua Edwards/workspace/Cup Car Lab A/Project_Headers/TFC\\TFC_UART.h"
DEFINED SYMBOLS
                            *ABS*:00000000 main.c
                            *COM*:00000004 ClastTime
                            *COM*:00000004 CSampleTime
                            *COM*:00000004 CSampleTimeInSec
                            *COM*:00000004 CInput
                            *COM*:00000004 COutput
                            *COM*:00000004 CSetpoint
                            *COM*:00000004 Cerror
                            *COM*:00000004 CITerm
                            *COM*:00000004 ClastInput
                            *COM*:00000004 Ckp
                            *COM*:00000004 Cki
                            *COM*:00000004 Ckd
                            *COM*:00000004 CoutMin
                            *COM*:00000004 CoutMax
C:\Users\JOSHUA~1\AppData\Local\Temp\ccOVTB5X.s:39     .rodata:00000000 $d
C:\Users\JOSHUA~1\AppData\Local\Temp\ccOVTB5X.s:57     .text.main:00000000 $t
C:\Users\JOSHUA~1\AppData\Local\Temp\ccOVTB5X.s:62     .text.main:00000000 main
C:\Users\JOSHUA~1\AppData\Local\Temp\ccOVTB5X.s:604    .text.main:00000378 $d
C:\Users\JOSHUA~1\AppData\Local\Temp\ccOVTB5X.s:629    .text.main:000003d4 $t
C:\Users\JOSHUA~1\AppData\Local\Temp\ccOVTB5X.s:1058   .text.main:000006c8 $d
C:\Users\JOSHUA~1\AppData\Local\Temp\ccOVTB5X.s:1069   .text.main:000006ec $t
C:\Users\JOSHUA~1\AppData\Local\Temp\ccOVTB5X.s:1504   .text.Compute:00000000 Compute
C:\Users\JOSHUA~1\AppData\Local\Temp\ccOVTB5X.s:1475   .text.main:000009bc $d
C:\Users\JOSHUA~1\AppData\Local\Temp\ccOVTB5X.s:1499   .text.Compute:00000000 $t
C:\Users\JOSHUA~1\AppData\Local\Temp\ccOVTB5X.s:1684   .text.Compute:00000134 $d
                     .debug_frame:00000010 $d
C:\Users\JOSHUA~1\AppData\Local\Temp\ccOVTB5X.s:1498   .text.main:000009fc $t

UNDEFINED SYMBOLS
__aeabi_f2d
__aeabi_dmul
__aeabi_d2f
__aeabi_i2f
__aeabi_fadd
__aeabi_ddiv
__aeabi_d2uiz
__aeabi_f2uiz
__aeabi_ui2f
TFC_Init
TFC_Task
TFC_GetDIP_Switch
TFC_ReadPot
TFC_SetServo
TFC_SetBatteryLED_Level
TFC_SetMotorPWM
TFC_Ticker
LineScanImageReady
LineScanImage0
Qprintf
SDA_SERIAL_OUTGOING_QUEUE
__aeabi_fsub
__aeabi_fmul
__aeabi_fcmpgt
__aeabi_fcmplt

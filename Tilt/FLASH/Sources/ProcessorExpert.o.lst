   1              		.cpu cortex-m0
   2              		.fpu softvfp
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 6
  10              		.eabi_attribute 34, 0
  11              		.eabi_attribute 18, 4
  12              		.code	16
  13              		.file	"ProcessorExpert.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.global	ChannelsCfg
  18              		.section	.rodata.ChannelsCfg,"a",%progbits
  19              		.align	2
  22              	ChannelsCfg:
  23 0000 08       		.byte	8
  24 0001 09       		.byte	9
  25 0002 0C       		.byte	12
  26 0003 1F       		.byte	31
  27              		.global	ChannelsCfg2
  28              		.section	.rodata.ChannelsCfg2,"a",%progbits
  29              		.align	2
  32              	ChannelsCfg2:
  33 0000 00000000 		.space	4
  34              		.comm	MeasuredValues,6,4
  35              		.comm	Measured,1,1
  36              		.comm	childInSeat,1,1
  37              		.comm	childInCar,1,1
  38              		.comm	motion1,1,1
  39              		.comm	tooHotTeensy,1,1
  40              		.comm	tooHotTherm,1,1
  41              		.comm	comm,1,1
  42              		.comm	temp,4,4
  43              		.section	.rodata
  44              		.align	2
  45              	.LC0:
  46 0000 48656C6C 		.ascii	"Hello!\015\000"
  46      6F210D00 
  47              		.align	2
  48              	.LC7:
  49 0008 636F6D6D 		.ascii	"communicating\000"
  49      756E6963 
  49      6174696E 
  49      6700
  50 0016 0000     		.align	2
  51              	.LC9:
  52 0018 6E6F7420 		.ascii	"not communicating\000"
  52      636F6D6D 
  52      756E6963 
  52      6174696E 
  52      6700
  53              		.global	__aeabi_i2d
  54              		.global	__aeabi_ddiv
  55              		.global	__aeabi_d2f
  56              		.global	__aeabi_fcmpge
  57              		.global	__aeabi_f2d
  58 002a 0000     		.align	2
  59              	.LC16:
  60 002c 256600   		.ascii	"%f\000"
  61 002f 00       		.align	2
  62              	.LC20:
  63 0030 25377500 		.ascii	"%7u\000"
  64              		.section	.text.main,"ax",%progbits
  65              		.align	2
  66              		.global	main
  67              		.code	16
  68              		.thumb_func
  70              	main:
  71              	.LFB0:
  72              		.file 1 "../Sources/ProcessorExpert.c"
   1:../Sources/ProcessorExpert.c **** /** ###################################################################
   2:../Sources/ProcessorExpert.c **** **     Filename    : ProcessorExpert.c
   3:../Sources/ProcessorExpert.c **** **     Project     : ProcessorExpert
   4:../Sources/ProcessorExpert.c **** **     Processor   : MKL25Z128VLK4
   5:../Sources/ProcessorExpert.c **** **     Version     : Driver 01.01
   6:../Sources/ProcessorExpert.c **** **     Compiler    : GNU C Compiler
   7:../Sources/ProcessorExpert.c **** **     Date/Time   : 2013-01-03, 14:56, # CodeGen: 0
   8:../Sources/ProcessorExpert.c **** **     Abstract    :
   9:../Sources/ProcessorExpert.c **** **         Main module.
  10:../Sources/ProcessorExpert.c **** **         This module contains user's application code.
  11:../Sources/ProcessorExpert.c **** **     Settings    :	in:		B0 = Seat Sensor, B1 = Belt Sensor, B2 = Thermometer, C17 = Thermal Camer
  12:../Sources/ProcessorExpert.c **** **     							E2 = PIR (Right), D2 = PIR (Left)
  13:../Sources/ProcessorExpert.c **** **     					out:	A12 = Status of child to Sender, A13 = Relay 1-1 (thermal), E5 = Relay 1-2 (everyt
  14:../Sources/ProcessorExpert.c **** **     							C2 = buzzer
  15:../Sources/ProcessorExpert.c **** **     Contents    :
  16:../Sources/ProcessorExpert.c **** **         No public methods
  17:../Sources/ProcessorExpert.c **** **
  18:../Sources/ProcessorExpert.c **** ** ###################################################################*/
  19:../Sources/ProcessorExpert.c **** /* MODULE ProcessorExpert */
  20:../Sources/ProcessorExpert.c **** 
  21:../Sources/ProcessorExpert.c **** 
  22:../Sources/ProcessorExpert.c **** /* Including needed modules to compile this module/procedure */
  23:../Sources/ProcessorExpert.c **** #include "Cpu.h"
  24:../Sources/ProcessorExpert.c **** #include "Events.h"
  25:../Sources/ProcessorExpert.c **** #include "CsIO1.h"
  26:../Sources/ProcessorExpert.c **** #include "IO1.h"
  27:../Sources/ProcessorExpert.c **** #include "ADC1.h"
  28:../Sources/ProcessorExpert.c **** #include "DMA1.h"
  29:../Sources/ProcessorExpert.c **** #include "TU1.h"
  30:../Sources/ProcessorExpert.c **** #include "A12.h"
  31:../Sources/ProcessorExpert.c **** #include "BitIoLdd1.h"
  32:../Sources/ProcessorExpert.c **** #include "A13.h"
  33:../Sources/ProcessorExpert.c **** #include "BitIoLdd2.h"
  34:../Sources/ProcessorExpert.c **** #include "E5.h"
  35:../Sources/ProcessorExpert.c **** #include "BitIoLdd3.h"
  36:../Sources/ProcessorExpert.c **** #include "B9.h"
  37:../Sources/ProcessorExpert.c **** #include "BitIoLdd4.h"
  38:../Sources/ProcessorExpert.c **** #include "C17.h"
  39:../Sources/ProcessorExpert.c **** #include "BitIoLdd6.h"
  40:../Sources/ProcessorExpert.c **** #include "C16.h"
  41:../Sources/ProcessorExpert.c **** #include "BitIoLdd5.h"
  42:../Sources/ProcessorExpert.c **** #include "C2.h"
  43:../Sources/ProcessorExpert.c **** #include "BitIoLdd7.h"
  44:../Sources/ProcessorExpert.c **** #include "E2.h"
  45:../Sources/ProcessorExpert.c **** #include "BitIoLdd8.h"
  46:../Sources/ProcessorExpert.c **** /* Including shared modules, which are used for whole project */
  47:../Sources/ProcessorExpert.c **** #include "PE_Types.h"
  48:../Sources/ProcessorExpert.c **** #include "PE_Error.h"
  49:../Sources/ProcessorExpert.c **** #include "PE_Const.h"
  50:../Sources/ProcessorExpert.c **** #include "IO_Map.h"
  51:../Sources/ProcessorExpert.c **** 
  52:../Sources/ProcessorExpert.c **** /* User includes (#include below this line is not maintained by Processor Expert) */
  53:../Sources/ProcessorExpert.c **** #include "my.h"
  54:../Sources/ProcessorExpert.c **** 
  55:../Sources/ProcessorExpert.c **** // size of the channel configuration array
  56:../Sources/ProcessorExpert.c **** #define ADC_CHANNELS_COUNT 3
  57:../Sources/ProcessorExpert.c **** #define True 1
  58:../Sources/ProcessorExpert.c **** #define False 0
  59:../Sources/ProcessorExpert.c **** 
  60:../Sources/ProcessorExpert.c **** // value for CFG2 array selecting MUX A pins or default
  61:../Sources/ProcessorExpert.c **** #define PIN_A (0) 
  62:../Sources/ProcessorExpert.c **** // value for CFG2 array selecting MUX B pins
  63:../Sources/ProcessorExpert.c **** #define PIN_B (ADC_CFG2_MUXSEL_MASK)
  64:../Sources/ProcessorExpert.c **** 
  65:../Sources/ProcessorExpert.c **** // configuration array for channels - channel numbers. Should ends with 0x1F which stops conversion
  66:../Sources/ProcessorExpert.c **** // second configuration array corresponding to channels selecting A/B pins
  67:../Sources/ProcessorExpert.c **** // For example: 0 + PIN_A corresponds to the pin ADC0_SE0,   5 + PIN_5 selects the pin ADC0_SE5b
  68:../Sources/ProcessorExpert.c **** // You can use these arrays to reorder the measurement as you need
  69:../Sources/ProcessorExpert.c **** const uint8_t ChannelsCfg [ADC_CHANNELS_COUNT + 1] =  { 8,       9,     12,   0x1F };
  70:../Sources/ProcessorExpert.c **** const uint8_t ChannelsCfg2[ADC_CHANNELS_COUNT + 1] =  {PIN_A, PIN_A, PIN_A,    0 };
  71:../Sources/ProcessorExpert.c **** 
  72:../Sources/ProcessorExpert.c **** // buffer for resulting measured values
  73:../Sources/ProcessorExpert.c **** uint16_t MeasuredValues[ADC_CHANNELS_COUNT];
  74:../Sources/ProcessorExpert.c **** 
  75:../Sources/ProcessorExpert.c **** // flag for end of measurement
  76:../Sources/ProcessorExpert.c **** bool Measured;
  77:../Sources/ProcessorExpert.c **** bool childInSeat;
  78:../Sources/ProcessorExpert.c **** bool childInCar, motion1;
  79:../Sources/ProcessorExpert.c **** bool tooHotTeensy, tooHotTherm;
  80:../Sources/ProcessorExpert.c **** bool comm;
  81:../Sources/ProcessorExpert.c **** float temp;
  82:../Sources/ProcessorExpert.c **** 
  83:../Sources/ProcessorExpert.c **** 
  84:../Sources/ProcessorExpert.c **** /*lint -save  -e970 Disable MISRA rule (6.3) checking. */
  85:../Sources/ProcessorExpert.c **** int main(void)
  86:../Sources/ProcessorExpert.c **** /*lint -restore Enable MISRA rule (6.3) checking. */
  87:../Sources/ProcessorExpert.c **** {
  73              		.loc 1 87 0
  74              		.cfi_startproc
  75 0000 90B5     		push	{r4, r7, lr}
  76              	.LCFI0:
  77              		.cfi_def_cfa_offset 12
  78              		.cfi_offset 4, -12
  79              		.cfi_offset 7, -8
  80              		.cfi_offset 14, -4
  81 0002 83B0     		sub	sp, sp, #12
  82              	.LCFI1:
  83              		.cfi_def_cfa_offset 24
  84 0004 00AF     		add	r7, sp, #0
  85              	.LCFI2:
  86              		.cfi_def_cfa_register 7
  88:../Sources/ProcessorExpert.c ****   /* Write your local variable definition here */
  89:../Sources/ProcessorExpert.c **** 
  90:../Sources/ProcessorExpert.c ****   /*** Processor Expert internal initialization. DON'T REMOVE THIS CODE!!! ***/
  91:../Sources/ProcessorExpert.c ****   PE_low_level_init();
  87              		.loc 1 91 0
  88 0006 FFF7FEFF 		bl	PE_low_level_init
  92:../Sources/ProcessorExpert.c ****   /*** End of Processor Expert internal initialization.                    ***/
  93:../Sources/ProcessorExpert.c ****   /* Write your local variable definition here */
  94:../Sources/ProcessorExpert.c ****   byte i;
  95:../Sources/ProcessorExpert.c ****   /*** Processor Expert internal initialisation. DON'T REMOVE THIS CODE!!! ***/
  96:../Sources/ProcessorExpert.c ****   PE_low_level_init();
  89              		.loc 1 96 0
  90 000a FFF7FEFF 		bl	PE_low_level_init
  97:../Sources/ProcessorExpert.c ****   /*** End of Processor Expert internal initialisation.                    ***/
  98:../Sources/ProcessorExpert.c **** 
  99:../Sources/ProcessorExpert.c ****   printf ("Hello!\r\n");
  91              		.loc 1 99 0
  92 000e A64B     		ldr	r3, .L29+8
  93 0010 181C     		mov	r0, r3
  94 0012 FFF7FEFF 		bl	puts
 100:../Sources/ProcessorExpert.c **** 
 101:../Sources/ProcessorExpert.c ****   // reset flag 
 102:../Sources/ProcessorExpert.c ****   Measured = FALSE;
  95              		.loc 1 102 0
  96 0016 A54B     		ldr	r3, .L29+12
  97 0018 0022     		mov	r2, #0
  98 001a 1A70     		strb	r2, [r3]
 103:../Sources/ProcessorExpert.c ****   C17_SetDir(False);
  99              		.loc 1 103 0
 100 001c A44B     		ldr	r3, .L29+16
 101 001e 9B69     		ldr	r3, [r3, #24]
 102 0020 181C     		mov	r0, r3
 103 0022 0021     		mov	r1, #0
 104 0024 FFF7FEFF 		bl	BitIoLdd6_SetDir
 104:../Sources/ProcessorExpert.c ****   C16_SetDir(False);
 105              		.loc 1 104 0
 106 0028 A14B     		ldr	r3, .L29+16
 107 002a DB69     		ldr	r3, [r3, #28]
 108 002c 181C     		mov	r0, r3
 109 002e 0021     		mov	r1, #0
 110 0030 FFF7FEFF 		bl	BitIoLdd5_SetDir
 105:../Sources/ProcessorExpert.c ****   // Initialise ADC now
 106:../Sources/ProcessorExpert.c ****   ADC1_Init();
 111              		.loc 1 106 0
 112 0034 FFF7FEFF 		bl	ADC1_Init
 107:../Sources/ProcessorExpert.c ****   // Initialise DMA now  
 108:../Sources/ProcessorExpert.c ****   DMA1_Init();
 113              		.loc 1 108 0
 114 0038 FFF7FEFF 		bl	DMA1_Init
 115              	.L26:
 109:../Sources/ProcessorExpert.c ****   // loop forever  
 110:../Sources/ProcessorExpert.c ****   while (TRUE) {
 111:../Sources/ProcessorExpert.c ****     tooHotTeensy = C17_GetVal();
 116              		.loc 1 111 0
 117 003c 9C4B     		ldr	r3, .L29+16
 118 003e 9B69     		ldr	r3, [r3, #24]
 119 0040 181C     		mov	r0, r3
 120 0042 FFF7FEFF 		bl	BitIoLdd6_GetVal
 121 0046 031C     		mov	r3, r0
 122 0048 1A1C     		mov	r2, r3
 123 004a 9A4B     		ldr	r3, .L29+20
 124 004c 1A70     		strb	r2, [r3]
 112:../Sources/ProcessorExpert.c ****     comm = C16_GetVal();
 125              		.loc 1 112 0
 126 004e 984B     		ldr	r3, .L29+16
 127 0050 DB69     		ldr	r3, [r3, #28]
 128 0052 181C     		mov	r0, r3
 129 0054 FFF7FEFF 		bl	BitIoLdd5_GetVal
 130 0058 031C     		mov	r3, r0
 131 005a 1A1C     		mov	r2, r3
 132 005c 964B     		ldr	r3, .L29+24
 133 005e 1A70     		strb	r2, [r3]
 113:../Sources/ProcessorExpert.c ****     motion1 = E2_GetVal();			// PIR Motion Detector
 134              		.loc 1 113 0
 135 0060 934B     		ldr	r3, .L29+16
 136 0062 5B6A     		ldr	r3, [r3, #36]
 137 0064 181C     		mov	r0, r3
 138 0066 FFF7FEFF 		bl	BitIoLdd8_GetVal
 139 006a 031C     		mov	r3, r0
 140 006c 1A1C     		mov	r2, r3
 141 006e 934B     		ldr	r3, .L29+28
 142 0070 1A70     		strb	r2, [r3]
 114:../Sources/ProcessorExpert.c ****     if(comm)
 143              		.loc 1 114 0
 144 0072 914B     		ldr	r3, .L29+24
 145 0074 1B78     		ldrb	r3, [r3]
 146 0076 002B     		cmp	r3, #0
 147 0078 04D0     		beq	.L2
 115:../Sources/ProcessorExpert.c ****     {
 116:../Sources/ProcessorExpert.c ****     	printf("communicating\n");
 148              		.loc 1 116 0
 149 007a 914B     		ldr	r3, .L29+32
 150 007c 181C     		mov	r0, r3
 151 007e FFF7FEFF 		bl	puts
 152 0082 03E0     		b	.L3
 153              	.L2:
 117:../Sources/ProcessorExpert.c ****     } else
 118:../Sources/ProcessorExpert.c ****     {
 119:../Sources/ProcessorExpert.c ****     	printf("not communicating\n");
 154              		.loc 1 119 0
 155 0084 8F4B     		ldr	r3, .L29+36
 156 0086 181C     		mov	r0, r3
 157 0088 FFF7FEFF 		bl	puts
 158              	.L3:
 120:../Sources/ProcessorExpert.c ****     }
 121:../Sources/ProcessorExpert.c **** 	// clear flag  
 122:../Sources/ProcessorExpert.c **** 	Measured = FALSE;	
 159              		.loc 1 122 0
 160 008c 874B     		ldr	r3, .L29+12
 161 008e 0022     		mov	r2, #0
 162 0090 1A70     		strb	r2, [r3]
 123:../Sources/ProcessorExpert.c **** 	// reset DMA0 destination pointer to beginning of the buffer 
 124:../Sources/ProcessorExpert.c **** 	DMA_DAR0 = (uint32_t) &MeasuredValues;
 163              		.loc 1 124 0
 164 0092 8D4A     		ldr	r2, .L29+40
 165 0094 8D49     		ldr	r1, .L29+44
 166 0096 8223     		mov	r3, #130
 167 0098 5B00     		lsl	r3, r3, #1
 168 009a D150     		str	r1, [r2, r3]
 125:../Sources/ProcessorExpert.c **** 	// reset DMA1 source pointer (MUX switching writes)
 126:../Sources/ProcessorExpert.c **** 	DMA_SAR1 = (uint32_t) &ChannelsCfg2;
 169              		.loc 1 126 0
 170 009c 8A4A     		ldr	r2, .L29+40
 171 009e 8C49     		ldr	r1, .L29+48
 172 00a0 8823     		mov	r3, #136
 173 00a2 5B00     		lsl	r3, r3, #1
 174 00a4 D150     		str	r1, [r2, r3]
 127:../Sources/ProcessorExpert.c **** 	// reset DMA2 source pointer (channel switching and conversion start writes)
 128:../Sources/ProcessorExpert.c **** 	DMA_SAR2 = (uint32_t) &ChannelsCfg;
 175              		.loc 1 128 0
 176 00a6 884A     		ldr	r2, .L29+40
 177 00a8 8A49     		ldr	r1, .L29+52
 178 00aa 9023     		mov	r3, #144
 179 00ac 5B00     		lsl	r3, r3, #1
 180 00ae D150     		str	r1, [r2, r3]
 129:../Sources/ProcessorExpert.c **** 	// number of total bytes to be transfered from the ADC result register A 
 130:../Sources/ProcessorExpert.c **** 	DMA_DSR_BCR0 = ADC_CHANNELS_COUNT * 2;
 181              		.loc 1 130 0
 182 00b0 854A     		ldr	r2, .L29+40
 183 00b2 8423     		mov	r3, #132
 184 00b4 5B00     		lsl	r3, r3, #1
 185 00b6 0621     		mov	r1, #6
 186 00b8 D150     		str	r1, [r2, r3]
 131:../Sources/ProcessorExpert.c **** 	// set number of total bytes to be transfered to the ADC0_CFG2 
 132:../Sources/ProcessorExpert.c **** 	DMA_DSR_BCR1 = ADC_CHANNELS_COUNT + 1;
 187              		.loc 1 132 0
 188 00ba 834A     		ldr	r2, .L29+40
 189 00bc 8C23     		mov	r3, #140
 190 00be 5B00     		lsl	r3, r3, #1
 191 00c0 0421     		mov	r1, #4
 192 00c2 D150     		str	r1, [r2, r3]
 133:../Sources/ProcessorExpert.c **** 	// set number of total bytes to be transfered to the ADC0_SC1A.  
 134:../Sources/ProcessorExpert.c **** 	DMA_DSR_BCR2 = ADC_CHANNELS_COUNT + 1;
 193              		.loc 1 134 0
 194 00c4 804A     		ldr	r2, .L29+40
 195 00c6 9423     		mov	r3, #148
 196 00c8 5B00     		lsl	r3, r3, #1
 197 00ca 0421     		mov	r1, #4
 198 00cc D150     		str	r1, [r2, r3]
 135:../Sources/ProcessorExpert.c ****     // start first DMA1 transfer (selects mux, then fires channel 2 to select channel which starts 
 136:../Sources/ProcessorExpert.c ****     DMA_DCR1 |= DMA_DCR_START_MASK;
 199              		.loc 1 136 0
 200 00ce 7E4A     		ldr	r2, .L29+40
 201 00d0 7D49     		ldr	r1, .L29+40
 202 00d2 8E23     		mov	r3, #142
 203 00d4 5B00     		lsl	r3, r3, #1
 204 00d6 CB58     		ldr	r3, [r1, r3]
 205 00d8 8021     		mov	r1, #128
 206 00da 4902     		lsl	r1, r1, #9
 207 00dc 1943     		orr	r1, r3
 208 00de 8E23     		mov	r3, #142
 209 00e0 5B00     		lsl	r3, r3, #1
 210 00e2 D150     		str	r1, [r2, r3]
 137:../Sources/ProcessorExpert.c ****     // wait till it's all measured
 138:../Sources/ProcessorExpert.c **** 	while (!Measured) {}	  
 211              		.loc 1 138 0
 212 00e4 C046     		mov	r8, r8
 213              	.L4:
 214              		.loc 1 138 0 is_stmt 0
 215 00e6 714B     		ldr	r3, .L29+12
 216 00e8 1B78     		ldrb	r3, [r3]
 217 00ea 002B     		cmp	r3, #0
 218 00ec FBD0     		beq	.L4
 139:../Sources/ProcessorExpert.c **** 	// print all measured values to console
 140:../Sources/ProcessorExpert.c **** 	
 141:../Sources/ProcessorExpert.c **** 	/*
 142:../Sources/ProcessorExpert.c **** 	 * The following takes temp
 143:../Sources/ProcessorExpert.c **** 	 */
 144:../Sources/ProcessorExpert.c **** 	temp = MeasuredValues[2]/64.06926407;
 219              		.loc 1 144 0 is_stmt 1
 220 00ee 774B     		ldr	r3, .L29+44
 221 00f0 9B88     		ldrh	r3, [r3, #4]
 222 00f2 181C     		mov	r0, r3
 223 00f4 FFF7FEFF 		bl	__aeabi_i2d
 224 00f8 031C     		mov	r3, r0
 225 00fa 0C1C     		mov	r4, r1
 226 00fc 181C     		mov	r0, r3
 227 00fe 211C     		mov	r1, r4
 228 0100 684B     		ldr	r3, .L29+4
 229 0102 674A     		ldr	r2, .L29
 230 0104 FFF7FEFF 		bl	__aeabi_ddiv
 231 0108 031C     		mov	r3, r0
 232 010a 0C1C     		mov	r4, r1
 233 010c 181C     		mov	r0, r3
 234 010e 211C     		mov	r1, r4
 235 0110 FFF7FEFF 		bl	__aeabi_d2f
 236 0114 021C     		add	r2, r0, #0
 237 0116 704B     		ldr	r3, .L29+56
 238 0118 1A60     		str	r2, [r3]
 145:../Sources/ProcessorExpert.c **** 	if (temp >= 86) tooHotTherm = TRUE;
 239              		.loc 1 145 0
 240 011a 6F4B     		ldr	r3, .L29+56
 241 011c 1B68     		ldr	r3, [r3]
 242 011e 181C     		add	r0, r3, #0
 243 0120 6E49     		ldr	r1, .L29+60
 244 0122 FFF7FEFF 		bl	__aeabi_fcmpge
 245 0126 031C     		mov	r3, r0
 246 0128 002B     		cmp	r3, #0
 247 012a 03D0     		beq	.L28
 248              	.L27:
 249              		.loc 1 145 0 is_stmt 0
 250 012c 6C4B     		ldr	r3, .L29+64
 251 012e 0122     		mov	r2, #1
 252 0130 1A70     		strb	r2, [r3]
 253 0132 02E0     		b	.L7
 254              	.L28:
 146:../Sources/ProcessorExpert.c **** 	else tooHotTherm = FALSE;
 255              		.loc 1 146 0 is_stmt 1
 256 0134 6A4B     		ldr	r3, .L29+64
 257 0136 0022     		mov	r2, #0
 258 0138 1A70     		strb	r2, [r3]
 259              	.L7:
 147:../Sources/ProcessorExpert.c **** 	printf ("%f",temp);
 260              		.loc 1 147 0
 261 013a 674B     		ldr	r3, .L29+56
 262 013c 1B68     		ldr	r3, [r3]
 263 013e 181C     		add	r0, r3, #0
 264 0140 FFF7FEFF 		bl	__aeabi_f2d
 265 0144 031C     		mov	r3, r0
 266 0146 0C1C     		mov	r4, r1
 267 0148 664A     		ldr	r2, .L29+68
 268 014a 101C     		mov	r0, r2
 269 014c 1A1C     		mov	r2, r3
 270 014e 231C     		mov	r3, r4
 271 0150 FFF7FEFF 		bl	printf
 148:../Sources/ProcessorExpert.c **** 	
 149:../Sources/ProcessorExpert.c **** 	/*
 150:../Sources/ProcessorExpert.c **** 	 * The following senses motion in car
 151:../Sources/ProcessorExpert.c **** 	 */
 152:../Sources/ProcessorExpert.c **** 	if (motion1) childInCar = True;
 272              		.loc 1 152 0
 273 0154 594B     		ldr	r3, .L29+28
 274 0156 1B78     		ldrb	r3, [r3]
 275 0158 002B     		cmp	r3, #0
 276 015a 03D0     		beq	.L8
 277              		.loc 1 152 0 is_stmt 0
 278 015c 624B     		ldr	r3, .L29+72
 279 015e 0122     		mov	r2, #1
 280 0160 1A70     		strb	r2, [r3]
 281 0162 02E0     		b	.L9
 282              	.L8:
 153:../Sources/ProcessorExpert.c **** 	else childInCar = False;
 283              		.loc 1 153 0 is_stmt 1
 284 0164 604B     		ldr	r3, .L29+72
 285 0166 0022     		mov	r2, #0
 286 0168 1A70     		strb	r2, [r3]
 287              	.L9:
 154:../Sources/ProcessorExpert.c **** 	
 155:../Sources/ProcessorExpert.c **** 	/*
 156:../Sources/ProcessorExpert.c **** 	 * This senses if the child is in the seat
 157:../Sources/ProcessorExpert.c **** 	 */
 158:../Sources/ProcessorExpert.c **** 	if (MeasuredValues[0]>30000 && MeasuredValues[1]<30000)childInSeat = True;
 288              		.loc 1 158 0
 289 016a 584B     		ldr	r3, .L29+44
 290 016c 1A88     		ldrh	r2, [r3]
 291 016e 5F4B     		ldr	r3, .L29+76
 292 0170 9A42     		cmp	r2, r3
 293 0172 08D9     		bls	.L10
 294              		.loc 1 158 0 is_stmt 0
 295 0174 554B     		ldr	r3, .L29+44
 296 0176 5A88     		ldrh	r2, [r3, #2]
 297 0178 5D4B     		ldr	r3, .L29+80
 298 017a 9A42     		cmp	r2, r3
 299 017c 03D8     		bhi	.L10
 300 017e 5D4B     		ldr	r3, .L29+84
 301 0180 0122     		mov	r2, #1
 302 0182 1A70     		strb	r2, [r3]
 303 0184 02E0     		b	.L11
 304              	.L10:
 159:../Sources/ProcessorExpert.c **** 	else childInSeat = False;
 305              		.loc 1 159 0 is_stmt 1
 306 0186 5B4B     		ldr	r3, .L29+84
 307 0188 0022     		mov	r2, #0
 308 018a 1A70     		strb	r2, [r3]
 309              	.L11:
 160:../Sources/ProcessorExpert.c **** 	
 161:../Sources/ProcessorExpert.c **** 	/*
 162:../Sources/ProcessorExpert.c **** 	 * if child is in seat tell transmitter
 163:../Sources/ProcessorExpert.c **** 	 */
 164:../Sources/ProcessorExpert.c **** 	if (childInSeat || childInCar) A12_SetVal();	// A12 is to arduino sender HIGH
 310              		.loc 1 164 0
 311 018c 594B     		ldr	r3, .L29+84
 312 018e 1B78     		ldrb	r3, [r3]
 313 0190 002B     		cmp	r3, #0
 314 0192 03D1     		bne	.L12
 315              		.loc 1 164 0 is_stmt 0
 316 0194 544B     		ldr	r3, .L29+72
 317 0196 1B78     		ldrb	r3, [r3]
 318 0198 002B     		cmp	r3, #0
 319 019a 05D0     		beq	.L13
 320              	.L12:
 321              		.loc 1 164 0
 322 019c 444B     		ldr	r3, .L29+16
 323 019e 9B68     		ldr	r3, [r3, #8]
 324 01a0 181C     		mov	r0, r3
 325 01a2 FFF7FEFF 		bl	BitIoLdd1_SetVal
 326 01a6 04E0     		b	.L14
 327              	.L13:
 165:../Sources/ProcessorExpert.c **** 	else A12_ClrVal();						// A12 is to arduino sender LOW
 328              		.loc 1 165 0 is_stmt 1
 329 01a8 414B     		ldr	r3, .L29+16
 330 01aa 9B68     		ldr	r3, [r3, #8]
 331 01ac 181C     		mov	r0, r3
 332 01ae FFF7FEFF 		bl	BitIoLdd1_ClrVal
 333              	.L14:
 166:../Sources/ProcessorExpert.c **** 	
 167:../Sources/ProcessorExpert.c **** 	/*
 168:../Sources/ProcessorExpert.c **** 	 * if the kid is in the seat and not buckeled up
 169:../Sources/ProcessorExpert.c **** 	 * set off buzzer
 170:../Sources/ProcessorExpert.c **** 	 */
 171:../Sources/ProcessorExpert.c **** 	if (MeasuredValues[0]>30000 && MeasuredValues[1]>30000)
 334              		.loc 1 171 0
 335 01b2 464B     		ldr	r3, .L29+44
 336 01b4 1A88     		ldrh	r2, [r3]
 337 01b6 4D4B     		ldr	r3, .L29+76
 338 01b8 9A42     		cmp	r2, r3
 339 01ba 0AD9     		bls	.L15
 340              		.loc 1 171 0 is_stmt 0
 341 01bc 434B     		ldr	r3, .L29+44
 342 01be 5A88     		ldrh	r2, [r3, #2]
 343 01c0 4A4B     		ldr	r3, .L29+76
 344 01c2 9A42     		cmp	r2, r3
 345 01c4 05D9     		bls	.L15
 172:../Sources/ProcessorExpert.c **** 	{
 173:../Sources/ProcessorExpert.c **** 		C2_SetVal();
 346              		.loc 1 173 0 is_stmt 1
 347 01c6 3A4B     		ldr	r3, .L29+16
 348 01c8 1B6A     		ldr	r3, [r3, #32]
 349 01ca 181C     		mov	r0, r3
 350 01cc FFF7FEFF 		bl	BitIoLdd7_SetVal
 351 01d0 04E0     		b	.L16
 352              	.L15:
 174:../Sources/ProcessorExpert.c **** 	} else
 175:../Sources/ProcessorExpert.c **** 	{
 176:../Sources/ProcessorExpert.c **** 		C2_ClrVal();
 353              		.loc 1 176 0
 354 01d2 374B     		ldr	r3, .L29+16
 355 01d4 1B6A     		ldr	r3, [r3, #32]
 356 01d6 181C     		mov	r0, r3
 357 01d8 FFF7FEFF 		bl	BitIoLdd7_ClrVal
 358              	.L16:
 177:../Sources/ProcessorExpert.c **** 	}
 178:../Sources/ProcessorExpert.c **** 	
 179:../Sources/ProcessorExpert.c **** 	/*
 180:../Sources/ProcessorExpert.c **** 	 * if the radio's can't communicate and the child is in the seat then
 181:../Sources/ProcessorExpert.c **** 	 * turn on the lights
 182:../Sources/ProcessorExpert.c **** 	 */
 183:../Sources/ProcessorExpert.c **** 	if(!comm && (childInSeat || childInCar))
 359              		.loc 1 183 0
 360 01dc 364B     		ldr	r3, .L29+24
 361 01de 1B78     		ldrb	r3, [r3]
 362 01e0 002B     		cmp	r3, #0
 363 01e2 0DD1     		bne	.L17
 364              		.loc 1 183 0 is_stmt 0
 365 01e4 434B     		ldr	r3, .L29+84
 366 01e6 1B78     		ldrb	r3, [r3]
 367 01e8 002B     		cmp	r3, #0
 368 01ea 03D1     		bne	.L18
 369 01ec 3E4B     		ldr	r3, .L29+72
 370 01ee 1B78     		ldrb	r3, [r3]
 371 01f0 002B     		cmp	r3, #0
 372 01f2 05D0     		beq	.L17
 373              	.L18:
 184:../Sources/ProcessorExpert.c **** 	{
 185:../Sources/ProcessorExpert.c **** 		B9_SetVal(); // turn on lights
 374              		.loc 1 185 0 is_stmt 1
 375 01f4 2E4B     		ldr	r3, .L29+16
 376 01f6 5B69     		ldr	r3, [r3, #20]
 377 01f8 181C     		mov	r0, r3
 378 01fa FFF7FEFF 		bl	BitIoLdd4_SetVal
 379 01fe 04E0     		b	.L19
 380              	.L17:
 186:../Sources/ProcessorExpert.c **** 	} else
 187:../Sources/ProcessorExpert.c **** 	{
 188:../Sources/ProcessorExpert.c **** 		B9_ClrVal(); // turn off lights
 381              		.loc 1 188 0
 382 0200 2B4B     		ldr	r3, .L29+16
 383 0202 5B69     		ldr	r3, [r3, #20]
 384 0204 181C     		mov	r0, r3
 385 0206 FFF7FEFF 		bl	BitIoLdd4_ClrVal
 386              	.L19:
 189:../Sources/ProcessorExpert.c **** 	}
 190:../Sources/ProcessorExpert.c **** 	
 191:../Sources/ProcessorExpert.c **** 	/*
 192:../Sources/ProcessorExpert.c **** 	 * if either of the temp sensors sense it's too hot
 193:../Sources/ProcessorExpert.c **** 	 * and the child is in the seat then turn on the ac
 194:../Sources/ProcessorExpert.c **** 	 * system
 195:../Sources/ProcessorExpert.c **** 	 */
 196:../Sources/ProcessorExpert.c **** 	if ((tooHotTeensy || tooHotTherm) && childInSeat)
 387              		.loc 1 196 0
 388 020a 2A4B     		ldr	r3, .L29+20
 389 020c 1B78     		ldrb	r3, [r3]
 390 020e 002B     		cmp	r3, #0
 391 0210 03D1     		bne	.L20
 392              		.loc 1 196 0 is_stmt 0
 393 0212 334B     		ldr	r3, .L29+64
 394 0214 1B78     		ldrb	r3, [r3]
 395 0216 002B     		cmp	r3, #0
 396 0218 0ED0     		beq	.L21
 397              	.L20:
 398              		.loc 1 196 0
 399 021a 364B     		ldr	r3, .L29+84
 400 021c 1B78     		ldrb	r3, [r3]
 401 021e 002B     		cmp	r3, #0
 402 0220 0AD0     		beq	.L21
 197:../Sources/ProcessorExpert.c **** 	{
 198:../Sources/ProcessorExpert.c **** 		A13_SetVal(); 	// turn on AC
 403              		.loc 1 198 0 is_stmt 1
 404 0222 234B     		ldr	r3, .L29+16
 405 0224 DB68     		ldr	r3, [r3, #12]
 406 0226 181C     		mov	r0, r3
 407 0228 FFF7FEFF 		bl	BitIoLdd2_SetVal
 199:../Sources/ProcessorExpert.c **** 		E5_SetVal();	// turn on Therm
 408              		.loc 1 199 0
 409 022c 204B     		ldr	r3, .L29+16
 410 022e 1B69     		ldr	r3, [r3, #16]
 411 0230 181C     		mov	r0, r3
 412 0232 FFF7FEFF 		bl	BitIoLdd3_SetVal
 413 0236 09E0     		b	.L22
 414              	.L21:
 200:../Sources/ProcessorExpert.c **** 	} else
 201:../Sources/ProcessorExpert.c **** 	{
 202:../Sources/ProcessorExpert.c **** 		A13_ClrVal();	// turn off AC
 415              		.loc 1 202 0
 416 0238 1D4B     		ldr	r3, .L29+16
 417 023a DB68     		ldr	r3, [r3, #12]
 418 023c 181C     		mov	r0, r3
 419 023e FFF7FEFF 		bl	BitIoLdd2_ClrVal
 203:../Sources/ProcessorExpert.c **** 		E5_ClrVal();	// turn off Therm
 420              		.loc 1 203 0
 421 0242 1B4B     		ldr	r3, .L29+16
 422 0244 1B69     		ldr	r3, [r3, #16]
 423 0246 181C     		mov	r0, r3
 424 0248 FFF7FEFF 		bl	BitIoLdd3_ClrVal
 425              	.L22:
 204:../Sources/ProcessorExpert.c **** 	}
 205:../Sources/ProcessorExpert.c **** 	
 206:../Sources/ProcessorExpert.c **** 	/*
 207:../Sources/ProcessorExpert.c **** 	 * print out values of analog signals
 208:../Sources/ProcessorExpert.c **** 	 */
 209:../Sources/ProcessorExpert.c **** 	for (i=0; i<ADC_CHANNELS_COUNT; i++) {
 426              		.loc 1 209 0
 427 024c FB1D     		add	r3, r7, #7
 428 024e 0022     		mov	r2, #0
 429 0250 1A70     		strb	r2, [r3]
 430 0252 0EE0     		b	.L23
 431              	.L24:
 210:../Sources/ProcessorExpert.c **** 		printf ("%7u", (uint16_t) MeasuredValues[i]);
 432              		.loc 1 210 0
 433 0254 FB1D     		add	r3, r7, #7
 434 0256 1A78     		ldrb	r2, [r3]
 435 0258 1C4B     		ldr	r3, .L29+44
 436 025a 5200     		lsl	r2, r2, #1
 437 025c D35A     		ldrh	r3, [r2, r3]
 438 025e 264A     		ldr	r2, .L29+88
 439 0260 101C     		mov	r0, r2
 440 0262 191C     		mov	r1, r3
 441 0264 FFF7FEFF 		bl	printf
 209:../Sources/ProcessorExpert.c **** 	for (i=0; i<ADC_CHANNELS_COUNT; i++) {
 442              		.loc 1 209 0
 443 0268 FB1D     		add	r3, r7, #7
 444 026a FA1D     		add	r2, r7, #7
 445 026c 1278     		ldrb	r2, [r2]
 446 026e 0132     		add	r2, r2, #1
 447 0270 1A70     		strb	r2, [r3]
 448              	.L23:
 209:../Sources/ProcessorExpert.c **** 	for (i=0; i<ADC_CHANNELS_COUNT; i++) {
 449              		.loc 1 209 0 is_stmt 0
 450 0272 FB1D     		add	r3, r7, #7
 451 0274 1B78     		ldrb	r3, [r3]
 452 0276 022B     		cmp	r3, #2
 453 0278 ECD9     		bls	.L24
 211:../Sources/ProcessorExpert.c **** 	}  	  
 212:../Sources/ProcessorExpert.c **** 	printf ("\n");
 454              		.loc 1 212 0 is_stmt 1
 455 027a 0A20     		mov	r0, #10
 456 027c FFF7FEFF 		bl	putchar
 213:../Sources/ProcessorExpert.c **** 	// wait for some time to slow down output
 214:../Sources/ProcessorExpert.c **** 	TU1_ResetCounter(TU1_DeviceData);
 457              		.loc 1 214 0
 458 0280 0B4B     		ldr	r3, .L29+16
 459 0282 5B68     		ldr	r3, [r3, #4]
 460 0284 181C     		mov	r0, r3
 461 0286 FFF7FEFF 		bl	TU1_ResetCounter
 215:../Sources/ProcessorExpert.c **** 	while (TU1_GetCounterValue(TU1_DeviceData) < 50000) {}
 462              		.loc 1 215 0
 463 028a C046     		mov	r8, r8
 464              	.L25:
 465              		.loc 1 215 0 is_stmt 0
 466 028c 084B     		ldr	r3, .L29+16
 467 028e 5B68     		ldr	r3, [r3, #4]
 468 0290 181C     		mov	r0, r3
 469 0292 FFF7FEFF 		bl	TU1_GetCounterValue
 470 0296 021C     		mov	r2, r0
 471 0298 184B     		ldr	r3, .L29+92
 472 029a 9A42     		cmp	r2, r3
 473 029c F6D9     		bls	.L25
 216:../Sources/ProcessorExpert.c ****   } 
 474              		.loc 1 216 0 is_stmt 1
 475 029e CDE6     		b	.L26
 476              	.L30:
 477              		.align	3
 478              	.L29:
 479 02a0 06DC90D2 		.word	-762258426
 480 02a4 6E045040 		.word	1078985838
 481 02a8 00000000 		.word	.LC0
 482 02ac 00000000 		.word	Measured
 483 02b0 00000000 		.word	PE_LDD_DeviceDataList
 484 02b4 00000000 		.word	tooHotTeensy
 485 02b8 00000000 		.word	comm
 486 02bc 00000000 		.word	motion1
 487 02c0 08000000 		.word	.LC7
 488 02c4 18000000 		.word	.LC9
 489 02c8 00800040 		.word	1073774592
 490 02cc 00000000 		.word	MeasuredValues
 491 02d0 00000000 		.word	ChannelsCfg2
 492 02d4 00000000 		.word	ChannelsCfg
 493 02d8 00000000 		.word	temp
 494 02dc 0000AC42 		.word	1118568448
 495 02e0 00000000 		.word	tooHotTherm
 496 02e4 2C000000 		.word	.LC16
 497 02e8 00000000 		.word	childInCar
 498 02ec 30750000 		.word	30000
 499 02f0 2F750000 		.word	29999
 500 02f4 00000000 		.word	childInSeat
 501 02f8 30000000 		.word	.LC20
 502 02fc 4FC30000 		.word	49999
 503              		.cfi_endproc
 504              	.LFE0:
 506              		.text
 507              	.Letext0:
 508              		.file 2 "D:/Freescale/CW MCU v10.7/MCU/ARM_GCC_Support/ewl/EWL_C/include/cstdint"
 509              		.file 3 "C:/Users/Joshua Edwards/workspace/KL25_MultiADC_DMA/Generated_Code/PE_Types.h"
 510              		.file 4 "D:/Freescale/CW MCU v10.7/MCU/ProcessorExpert/lib/Kinetis/iofiles/MKL25Z4.h"
DEFINED SYMBOLS
                            *ABS*:00000000 ProcessorExpert.c
C:\Users\JOSHUA~1\AppData\Local\Temp\ccU8vMGf.s:22     .rodata.ChannelsCfg:00000000 ChannelsCfg
C:\Users\JOSHUA~1\AppData\Local\Temp\ccU8vMGf.s:19     .rodata.ChannelsCfg:00000000 $d
C:\Users\JOSHUA~1\AppData\Local\Temp\ccU8vMGf.s:32     .rodata.ChannelsCfg2:00000000 ChannelsCfg2
C:\Users\JOSHUA~1\AppData\Local\Temp\ccU8vMGf.s:29     .rodata.ChannelsCfg2:00000000 $d
                            *COM*:00000006 MeasuredValues
                            *COM*:00000001 Measured
                            *COM*:00000001 childInSeat
                            *COM*:00000001 childInCar
                            *COM*:00000001 motion1
                            *COM*:00000001 tooHotTeensy
                            *COM*:00000001 tooHotTherm
                            *COM*:00000001 comm
                            *COM*:00000004 temp
C:\Users\JOSHUA~1\AppData\Local\Temp\ccU8vMGf.s:44     .rodata:00000000 $d
C:\Users\JOSHUA~1\AppData\Local\Temp\ccU8vMGf.s:65     .text.main:00000000 $t
C:\Users\JOSHUA~1\AppData\Local\Temp\ccU8vMGf.s:70     .text.main:00000000 main
C:\Users\JOSHUA~1\AppData\Local\Temp\ccU8vMGf.s:479    .text.main:000002a0 $d
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
__aeabi_i2d
__aeabi_ddiv
__aeabi_d2f
__aeabi_fcmpge
__aeabi_f2d
PE_low_level_init
puts
BitIoLdd6_SetDir
BitIoLdd5_SetDir
ADC1_Init
DMA1_Init
BitIoLdd6_GetVal
BitIoLdd5_GetVal
BitIoLdd8_GetVal
printf
BitIoLdd1_SetVal
BitIoLdd1_ClrVal
BitIoLdd7_SetVal
BitIoLdd7_ClrVal
BitIoLdd4_SetVal
BitIoLdd4_ClrVal
BitIoLdd2_SetVal
BitIoLdd3_SetVal
BitIoLdd2_ClrVal
BitIoLdd3_ClrVal
putchar
TU1_ResetCounter
TU1_GetCounterValue
PE_LDD_DeviceDataList

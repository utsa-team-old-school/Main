   1              		.cpu cortex-m0
   2              		.fpu softvfp
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 6
  10              		.eabi_attribute 34, 0
  11              		.eabi_attribute 18, 4
  12              		.code	16
  13              		.file	"IO1.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.bss.DeviceDataPrv__DEFAULT_RTOS_ALLOC,"aw",%nobits
  18              		.align	2
  21              	DeviceDataPrv__DEFAULT_RTOS_ALLOC:
  22 0000 00000000 		.space	24
  22      00000000 
  22      00000000 
  22      00000000 
  22      00000000 
  23              		.section	.text.IO1_Init,"ax",%progbits
  24              		.align	2
  25              		.global	IO1_Init
  26              		.code	16
  27              		.thumb_func
  29              	IO1_Init:
  30              	.LFB0:
  31              		.file 1 "../Generated_Code/IO1.c"
   1:../Generated_Code/IO1.c **** /* ###################################################################
   2:../Generated_Code/IO1.c **** **     This component module is generated by Processor Expert. Do not modify it.
   3:../Generated_Code/IO1.c **** **     Filename    : IO1.c
   4:../Generated_Code/IO1.c **** **     Project     : ProcessorExpert
   5:../Generated_Code/IO1.c **** **     Processor   : MKL25Z128VLK4
   6:../Generated_Code/IO1.c **** **     Component   : Serial_LDD
   7:../Generated_Code/IO1.c **** **     Version     : Component 01.187, Driver 01.13, CPU db: 3.00.000
   8:../Generated_Code/IO1.c **** **     Compiler    : GNU C Compiler
   9:../Generated_Code/IO1.c **** **     Date/Time   : 2019-04-05, 11:20, # CodeGen: 60
  10:../Generated_Code/IO1.c **** **     Abstract    :
  11:../Generated_Code/IO1.c **** **         This component "Serial_LDD" implements an asynchronous serial
  12:../Generated_Code/IO1.c **** **         communication. The component supports different settings of
  13:../Generated_Code/IO1.c **** **         parity, word width, stop-bit and communication speed,
  14:../Generated_Code/IO1.c **** **         user can select interrupt or polling handler.
  15:../Generated_Code/IO1.c **** **         Communication speed can be changed also in runtime.
  16:../Generated_Code/IO1.c **** **         The component requires one on-chip asynchronous serial communication channel.
  17:../Generated_Code/IO1.c **** **     Settings    :
  18:../Generated_Code/IO1.c **** **          Component name                                 : IO1
  19:../Generated_Code/IO1.c **** **          Device                                         : UART0
  20:../Generated_Code/IO1.c **** **          Interrupt service/event                        : Disabled
  21:../Generated_Code/IO1.c **** **          Settings                                       : 
  22:../Generated_Code/IO1.c **** **            Data width                                   : 8 bits
  23:../Generated_Code/IO1.c **** **            Parity                                       : None
  24:../Generated_Code/IO1.c **** **            Stop bits                                    : 1
  25:../Generated_Code/IO1.c **** **            Loop mode                                    : Normal
  26:../Generated_Code/IO1.c **** **            Baud rate                                    : 115200 baud
  27:../Generated_Code/IO1.c **** **            Wakeup condition                             : Idle line wakeup
  28:../Generated_Code/IO1.c **** **            Stop in wait mode                            : no
  29:../Generated_Code/IO1.c **** **            Idle line mode                               : Starts after start bit
  30:../Generated_Code/IO1.c **** **            Transmitter output                           : Not inverted
  31:../Generated_Code/IO1.c **** **            Receiver input                               : Not inverted
  32:../Generated_Code/IO1.c **** **            Break generation length                      : 10/11 bits
  33:../Generated_Code/IO1.c **** **            Receiver                                     : Enabled
  34:../Generated_Code/IO1.c **** **              RxD                                        : TSI0_CH2/PTA1/UART0_RX/TPM2_CH0
  35:../Generated_Code/IO1.c **** **              RxD pin signal                             : 
  36:../Generated_Code/IO1.c **** **            Transmitter                                  : Enabled
  37:../Generated_Code/IO1.c **** **              TxD                                        : TSI0_CH3/PTA2/UART0_TX/TPM2_CH1
  38:../Generated_Code/IO1.c **** **              TxD pin signal                             : 
  39:../Generated_Code/IO1.c **** **            Flow control                                 : None
  40:../Generated_Code/IO1.c **** **          Initialization                                 : 
  41:../Generated_Code/IO1.c **** **            Enabled in init. code                        : yes
  42:../Generated_Code/IO1.c **** **            Auto initialization                          : yes
  43:../Generated_Code/IO1.c **** **            Event mask                                   : 
  44:../Generated_Code/IO1.c **** **              OnBlockSent                                : Disabled
  45:../Generated_Code/IO1.c **** **              OnBlockReceived                            : Disabled
  46:../Generated_Code/IO1.c **** **              OnTxComplete                               : Disabled
  47:../Generated_Code/IO1.c **** **              OnError                                    : Disabled
  48:../Generated_Code/IO1.c **** **              OnBreak                                    : Disabled
  49:../Generated_Code/IO1.c **** **          CPU clock/configuration selection              : 
  50:../Generated_Code/IO1.c **** **            Clock configuration 0                        : This component enabled
  51:../Generated_Code/IO1.c **** **            Clock configuration 1                        : This component enabled
  52:../Generated_Code/IO1.c **** **            Clock configuration 2                        : This component enabled
  53:../Generated_Code/IO1.c **** **            Clock configuration 3                        : This component enabled
  54:../Generated_Code/IO1.c **** **            Clock configuration 4                        : This component enabled
  55:../Generated_Code/IO1.c **** **            Clock configuration 5                        : This component enabled
  56:../Generated_Code/IO1.c **** **            Clock configuration 6                        : This component enabled
  57:../Generated_Code/IO1.c **** **            Clock configuration 7                        : This component enabled
  58:../Generated_Code/IO1.c **** **     Contents    :
  59:../Generated_Code/IO1.c **** **         Init - LDD_TDeviceData* IO1_Init(LDD_TUserData *UserDataPtr);
  60:../Generated_Code/IO1.c **** **         Main - void IO1_Main(LDD_TDeviceData *DeviceDataPtr);
  61:../Generated_Code/IO1.c **** **
  62:../Generated_Code/IO1.c **** **     Copyright : 1997 - 2014 Freescale Semiconductor, Inc. 
  63:../Generated_Code/IO1.c **** **     All Rights Reserved.
  64:../Generated_Code/IO1.c **** **     
  65:../Generated_Code/IO1.c **** **     Redistribution and use in source and binary forms, with or without modification,
  66:../Generated_Code/IO1.c **** **     are permitted provided that the following conditions are met:
  67:../Generated_Code/IO1.c **** **     
  68:../Generated_Code/IO1.c **** **     o Redistributions of source code must retain the above copyright notice, this list
  69:../Generated_Code/IO1.c **** **       of conditions and the following disclaimer.
  70:../Generated_Code/IO1.c **** **     
  71:../Generated_Code/IO1.c **** **     o Redistributions in binary form must reproduce the above copyright notice, this
  72:../Generated_Code/IO1.c **** **       list of conditions and the following disclaimer in the documentation and/or
  73:../Generated_Code/IO1.c **** **       other materials provided with the distribution.
  74:../Generated_Code/IO1.c **** **     
  75:../Generated_Code/IO1.c **** **     o Neither the name of Freescale Semiconductor, Inc. nor the names of its
  76:../Generated_Code/IO1.c **** **       contributors may be used to endorse or promote products derived from this
  77:../Generated_Code/IO1.c **** **       software without specific prior written permission.
  78:../Generated_Code/IO1.c **** **     
  79:../Generated_Code/IO1.c **** **     THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
  80:../Generated_Code/IO1.c **** **     ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
  81:../Generated_Code/IO1.c **** **     WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  82:../Generated_Code/IO1.c **** **     DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
  83:../Generated_Code/IO1.c **** **     ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
  84:../Generated_Code/IO1.c **** **     (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
  85:../Generated_Code/IO1.c **** **     LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
  86:../Generated_Code/IO1.c **** **     ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
  87:../Generated_Code/IO1.c **** **     (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
  88:../Generated_Code/IO1.c **** **     SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  89:../Generated_Code/IO1.c **** **     
  90:../Generated_Code/IO1.c **** **     http: www.freescale.com
  91:../Generated_Code/IO1.c **** **     mail: support@freescale.com
  92:../Generated_Code/IO1.c **** ** ###################################################################*/
  93:../Generated_Code/IO1.c **** /*!
  94:../Generated_Code/IO1.c **** ** @file IO1.c
  95:../Generated_Code/IO1.c **** ** @version 01.13
  96:../Generated_Code/IO1.c **** ** @brief
  97:../Generated_Code/IO1.c **** **         This component "Serial_LDD" implements an asynchronous serial
  98:../Generated_Code/IO1.c **** **         communication. The component supports different settings of
  99:../Generated_Code/IO1.c **** **         parity, word width, stop-bit and communication speed,
 100:../Generated_Code/IO1.c **** **         user can select interrupt or polling handler.
 101:../Generated_Code/IO1.c **** **         Communication speed can be changed also in runtime.
 102:../Generated_Code/IO1.c **** **         The component requires one on-chip asynchronous serial communication channel.
 103:../Generated_Code/IO1.c **** */         
 104:../Generated_Code/IO1.c **** /*!
 105:../Generated_Code/IO1.c **** **  @addtogroup IO1_module IO1 module documentation
 106:../Generated_Code/IO1.c **** **  @{
 107:../Generated_Code/IO1.c **** */         
 108:../Generated_Code/IO1.c **** 
 109:../Generated_Code/IO1.c **** /* MODULE IO1. */
 110:../Generated_Code/IO1.c **** /*lint -save  -e926 -e927 -e928 -e929 -e572 Disable MISRA rule (11.4,12.8) checking. */
 111:../Generated_Code/IO1.c **** 
 112:../Generated_Code/IO1.c **** /* {Default RTOS Adapter} No RTOS includes */
 113:../Generated_Code/IO1.c **** #include "IO1.h"
 114:../Generated_Code/IO1.c **** #include "UART0_PDD.h"
 115:../Generated_Code/IO1.c **** #include "SIM_PDD.h"
 116:../Generated_Code/IO1.c **** 
 117:../Generated_Code/IO1.c **** #ifdef __cplusplus
 118:../Generated_Code/IO1.c **** extern "C" {
 119:../Generated_Code/IO1.c **** #endif
 120:../Generated_Code/IO1.c **** 
 121:../Generated_Code/IO1.c **** /*! The mask of available events used to enable/disable events during runtime. */
 122:../Generated_Code/IO1.c **** #define AVAILABLE_EVENTS_MASK 0x00U
 123:../Generated_Code/IO1.c **** 
 124:../Generated_Code/IO1.c **** /* {Default RTOS Adapter} Static object used for simulation of dynamic driver memory allocation */
 125:../Generated_Code/IO1.c **** static IO1_TDeviceData DeviceDataPrv__DEFAULT_RTOS_ALLOC;
 126:../Generated_Code/IO1.c **** 
 127:../Generated_Code/IO1.c **** /*
 128:../Generated_Code/IO1.c **** ** ===================================================================
 129:../Generated_Code/IO1.c **** **     Method      :  IO1_Init (component Serial_LDD)
 130:../Generated_Code/IO1.c **** */
 131:../Generated_Code/IO1.c **** /*!
 132:../Generated_Code/IO1.c **** **     @brief
 133:../Generated_Code/IO1.c **** **         Initializes the device. Allocates memory for the device data
 134:../Generated_Code/IO1.c **** **         structure, allocates interrupt vectors and sets interrupt
 135:../Generated_Code/IO1.c **** **         priority, sets pin routing, sets timing, etc. If the "Enable
 136:../Generated_Code/IO1.c **** **         in init. code" is set to "yes" value then the device is also
 137:../Generated_Code/IO1.c **** **         enabled(see the description of the Enable() method). In this
 138:../Generated_Code/IO1.c **** **         case the Enable() method is not necessary and needn't to be
 139:../Generated_Code/IO1.c **** **         generated. 
 140:../Generated_Code/IO1.c **** **     @param
 141:../Generated_Code/IO1.c **** **         UserDataPtr     - Pointer to the user or
 142:../Generated_Code/IO1.c **** **                           RTOS specific data. This pointer will be
 143:../Generated_Code/IO1.c **** **                           passed as an event or callback parameter.
 144:../Generated_Code/IO1.c **** **     @return
 145:../Generated_Code/IO1.c **** **                         - Device data structure pointer.
 146:../Generated_Code/IO1.c **** */
 147:../Generated_Code/IO1.c **** /* ===================================================================*/
 148:../Generated_Code/IO1.c **** LDD_TDeviceData* IO1_Init(LDD_TUserData *UserDataPtr)
 149:../Generated_Code/IO1.c **** {
  32              		.loc 1 149 0
  33              		.cfi_startproc
  34 0000 80B5     		push	{r7, lr}
  35              	.LCFI0:
  36              		.cfi_def_cfa_offset 8
  37              		.cfi_offset 7, -8
  38              		.cfi_offset 14, -4
  39 0002 84B0     		sub	sp, sp, #16
  40              	.LCFI1:
  41              		.cfi_def_cfa_offset 24
  42 0004 00AF     		add	r7, sp, #0
  43              	.LCFI2:
  44              		.cfi_def_cfa_register 7
  45 0006 7860     		str	r0, [r7, #4]
 150:../Generated_Code/IO1.c ****   /* Allocate device structure */
 151:../Generated_Code/IO1.c ****   IO1_TDeviceDataPtr DeviceDataPrv;
 152:../Generated_Code/IO1.c ****   /* {Default RTOS Adapter} Driver memory allocation: Dynamic allocation is simulated by a pointer 
 153:../Generated_Code/IO1.c ****   DeviceDataPrv = &DeviceDataPrv__DEFAULT_RTOS_ALLOC;
  46              		.loc 1 153 0
  47 0008 4C4B     		ldr	r3, .L3
  48 000a FB60     		str	r3, [r7, #12]
 154:../Generated_Code/IO1.c **** 
 155:../Generated_Code/IO1.c ****   /* Clear the receive counters and pointer */
 156:../Generated_Code/IO1.c ****   DeviceDataPrv->InpRecvDataNum = 0x00U; /* Clear the counter of received characters */
  49              		.loc 1 156 0
  50 000c FB68     		ldr	r3, [r7, #12]
  51 000e 0022     		mov	r2, #0
  52 0010 5A80     		strh	r2, [r3, #2]
 157:../Generated_Code/IO1.c ****   DeviceDataPrv->InpDataNumReq = 0x00U; /* Clear the counter of characters to receive by ReceiveBlo
  53              		.loc 1 157 0
  54 0012 FB68     		ldr	r3, [r7, #12]
  55 0014 0022     		mov	r2, #0
  56 0016 1A81     		strh	r2, [r3, #8]
 158:../Generated_Code/IO1.c ****   DeviceDataPrv->InpDataPtr = NULL;    /* Clear the buffer pointer for received characters */
  57              		.loc 1 158 0
  58 0018 FB68     		ldr	r3, [r7, #12]
  59 001a 0022     		mov	r2, #0
  60 001c 5A60     		str	r2, [r3, #4]
 159:../Generated_Code/IO1.c ****   /* Clear the transmit counters and pointer */
 160:../Generated_Code/IO1.c ****   DeviceDataPrv->OutSentDataNum = 0x00U; /* Clear the counter of sent characters */
  61              		.loc 1 160 0
  62 001e FB68     		ldr	r3, [r7, #12]
  63 0020 0022     		mov	r2, #0
  64 0022 5A81     		strh	r2, [r3, #10]
 161:../Generated_Code/IO1.c ****   DeviceDataPrv->OutDataNumReq = 0x00U; /* Clear the counter of characters to be send by SendBlock(
  65              		.loc 1 161 0
  66 0024 FB68     		ldr	r3, [r7, #12]
  67 0026 0022     		mov	r2, #0
  68 0028 1A82     		strh	r2, [r3, #16]
 162:../Generated_Code/IO1.c ****   DeviceDataPrv->OutDataPtr = NULL;    /* Clear the buffer pointer for data to be transmitted */
  69              		.loc 1 162 0
  70 002a FB68     		ldr	r3, [r7, #12]
  71 002c 0022     		mov	r2, #0
  72 002e DA60     		str	r2, [r3, #12]
 163:../Generated_Code/IO1.c ****   DeviceDataPrv->UserDataPtr = UserDataPtr; /* Store the RTOS device structure */
  73              		.loc 1 163 0
  74 0030 FB68     		ldr	r3, [r7, #12]
  75 0032 7A68     		ldr	r2, [r7, #4]
  76 0034 5A61     		str	r2, [r3, #20]
 164:../Generated_Code/IO1.c ****   /* SIM_SCGC4: UART0=1 */
 165:../Generated_Code/IO1.c ****   SIM_SCGC4 |= SIM_SCGC4_UART0_MASK;
  77              		.loc 1 165 0
  78 0036 424A     		ldr	r2, .L3+4
  79 0038 4149     		ldr	r1, .L3+4
  80 003a 424B     		ldr	r3, .L3+8
  81 003c CB58     		ldr	r3, [r1, r3]
  82 003e 8021     		mov	r1, #128
  83 0040 C900     		lsl	r1, r1, #3
  84 0042 1943     		orr	r1, r3
  85 0044 3F4B     		ldr	r3, .L3+8
  86 0046 D150     		str	r1, [r2, r3]
 166:../Generated_Code/IO1.c ****   /* PORTA_PCR1: ISF=0,MUX=2 */
 167:../Generated_Code/IO1.c ****   PORTA_PCR1 = (uint32_t)((PORTA_PCR1 & (uint32_t)~(uint32_t)(
  87              		.loc 1 167 0
  88 0048 3F4B     		ldr	r3, .L3+12
  89 004a 3F4A     		ldr	r2, .L3+12
  90 004c 5168     		ldr	r1, [r2, #4]
  91 004e 3F4A     		ldr	r2, .L3+16
  92 0050 0A40     		and	r2, r1
  93 0052 8021     		mov	r1, #128
  94 0054 8900     		lsl	r1, r1, #2
  95 0056 0A43     		orr	r2, r1
  96 0058 5A60     		str	r2, [r3, #4]
 168:../Generated_Code/IO1.c ****                 PORT_PCR_ISF_MASK |
 169:../Generated_Code/IO1.c ****                 PORT_PCR_MUX(0x05)
 170:../Generated_Code/IO1.c ****                )) | (uint32_t)(
 171:../Generated_Code/IO1.c ****                 PORT_PCR_MUX(0x02)
 172:../Generated_Code/IO1.c ****                ));
 173:../Generated_Code/IO1.c ****   /* PORTA_PCR2: ISF=0,MUX=2 */
 174:../Generated_Code/IO1.c ****   PORTA_PCR2 = (uint32_t)((PORTA_PCR2 & (uint32_t)~(uint32_t)(
  97              		.loc 1 174 0
  98 005a 3B4B     		ldr	r3, .L3+12
  99 005c 3A4A     		ldr	r2, .L3+12
 100 005e 9168     		ldr	r1, [r2, #8]
 101 0060 3A4A     		ldr	r2, .L3+16
 102 0062 0A40     		and	r2, r1
 103 0064 8021     		mov	r1, #128
 104 0066 8900     		lsl	r1, r1, #2
 105 0068 0A43     		orr	r2, r1
 106 006a 9A60     		str	r2, [r3, #8]
 175:../Generated_Code/IO1.c ****                 PORT_PCR_ISF_MASK |
 176:../Generated_Code/IO1.c ****                 PORT_PCR_MUX(0x05)
 177:../Generated_Code/IO1.c ****                )) | (uint32_t)(
 178:../Generated_Code/IO1.c ****                 PORT_PCR_MUX(0x02)
 179:../Generated_Code/IO1.c ****                ));
 180:../Generated_Code/IO1.c ****   UART0_PDD_EnableTransmitter(UART0_BASE_PTR, PDD_DISABLE); /* Disable transmitter. */
 107              		.loc 1 180 0
 108 006c 384B     		ldr	r3, .L3+20
 109 006e 384A     		ldr	r2, .L3+20
 110 0070 D278     		ldrb	r2, [r2, #3]
 111 0072 D2B2     		uxtb	r2, r2
 112 0074 0821     		mov	r1, #8
 113 0076 8A43     		bic	r2, r1
 114 0078 D2B2     		uxtb	r2, r2
 115 007a DA70     		strb	r2, [r3, #3]
 181:../Generated_Code/IO1.c ****   UART0_PDD_EnableReceiver(UART0_BASE_PTR, PDD_DISABLE); /* Disable receiver. */
 116              		.loc 1 181 0
 117 007c 344B     		ldr	r3, .L3+20
 118 007e 344A     		ldr	r2, .L3+20
 119 0080 D278     		ldrb	r2, [r2, #3]
 120 0082 D2B2     		uxtb	r2, r2
 121 0084 0421     		mov	r1, #4
 122 0086 8A43     		bic	r2, r1
 123 0088 D2B2     		uxtb	r2, r2
 124 008a DA70     		strb	r2, [r3, #3]
 182:../Generated_Code/IO1.c ****   DeviceDataPrv->SerFlag = 0x00U;      /* Reset flags */
 125              		.loc 1 182 0
 126 008c FB68     		ldr	r3, [r7, #12]
 127 008e 0022     		mov	r2, #0
 128 0090 1A80     		strh	r2, [r3]
 183:../Generated_Code/IO1.c ****   /* UART0_C1: LOOPS=0,DOZEEN=0,RSRC=0,M=0,WAKE=0,ILT=0,PE=0,PT=0 */
 184:../Generated_Code/IO1.c ****   UART0_C1 = 0x00U;                    /*  Set the C1 register */
 129              		.loc 1 184 0
 130 0092 2F4B     		ldr	r3, .L3+20
 131 0094 0022     		mov	r2, #0
 132 0096 9A70     		strb	r2, [r3, #2]
 185:../Generated_Code/IO1.c ****   /* UART0_C3: R8T9=0,R9T8=0,TXDIR=0,TXINV=0,ORIE=0,NEIE=0,FEIE=0,PEIE=0 */
 186:../Generated_Code/IO1.c ****   UART0_C3 = 0x00U;                    /*  Set the C3 register */
 133              		.loc 1 186 0
 134 0098 2D4B     		ldr	r3, .L3+20
 135 009a 0022     		mov	r2, #0
 136 009c 9A71     		strb	r2, [r3, #6]
 187:../Generated_Code/IO1.c ****   /* UART0_C4: MAEN1=0,MAEN2=0,M10=0,OSR=0 */
 188:../Generated_Code/IO1.c ****   UART0_C4 = UART0_C4_OSR(0x00);       /*  Set the C4 register */
 137              		.loc 1 188 0
 138 009e 2C4B     		ldr	r3, .L3+20
 139 00a0 0022     		mov	r2, #0
 140 00a2 9A72     		strb	r2, [r3, #10]
 189:../Generated_Code/IO1.c ****   /* UART0_S2: LBKDIF=0,RXEDGIF=0,MSBF=0,RXINV=0,RWUID=0,BRK13=0,LBKDE=0,RAF=0 */
 190:../Generated_Code/IO1.c ****   UART0_S2 = 0x00U;                    /*  Set the S2 register */
 141              		.loc 1 190 0
 142 00a4 2A4B     		ldr	r3, .L3+20
 143 00a6 0022     		mov	r2, #0
 144 00a8 5A71     		strb	r2, [r3, #5]
 191:../Generated_Code/IO1.c ****   SIM_PDD_SetClockSourceUART0(SIM_BASE_PTR, SIM_PDD_UART0_PLL_FLL_CLOCK);
 145              		.loc 1 191 0
 146 00aa 254A     		ldr	r2, .L3+4
 147 00ac 2449     		ldr	r1, .L3+4
 148 00ae 294B     		ldr	r3, .L3+24
 149 00b0 C958     		ldr	r1, [r1, r3]
 150 00b2 294B     		ldr	r3, .L3+28
 151 00b4 0B40     		and	r3, r1
 152 00b6 8021     		mov	r1, #128
 153 00b8 C904     		lsl	r1, r1, #19
 154 00ba 1943     		orr	r1, r3
 155 00bc 254B     		ldr	r3, .L3+24
 156 00be D150     		str	r1, [r2, r3]
 192:../Generated_Code/IO1.c ****   UART0_PDD_SetBaudRate(UART0_BASE_PTR, 52U); /* Set the baud rate register. */
 157              		.loc 1 192 0
 158 00c0 234B     		ldr	r3, .L3+20
 159 00c2 234A     		ldr	r2, .L3+20
 160 00c4 1278     		ldrb	r2, [r2]
 161 00c6 D2B2     		uxtb	r2, r2
 162 00c8 1F21     		mov	r1, #31
 163 00ca 8A43     		bic	r2, r1
 164 00cc D2B2     		uxtb	r2, r2
 165 00ce 1A70     		strb	r2, [r3]
 166 00d0 1F4B     		ldr	r3, .L3+20
 167 00d2 3422     		mov	r2, #52
 168 00d4 5A70     		strb	r2, [r3, #1]
 193:../Generated_Code/IO1.c ****   UART0_PDD_SetOversamplingRatio(UART0_BASE_PTR, 3U);
 169              		.loc 1 193 0
 170 00d6 1E4B     		ldr	r3, .L3+20
 171 00d8 1D4A     		ldr	r2, .L3+20
 172 00da 927A     		ldrb	r2, [r2, #10]
 173 00dc D2B2     		uxtb	r2, r2
 174 00de D2B2     		uxtb	r2, r2
 175 00e0 1F21     		mov	r1, #31
 176 00e2 8A43     		bic	r2, r1
 177 00e4 D2B2     		uxtb	r2, r2
 178 00e6 0321     		mov	r1, #3
 179 00e8 0A43     		orr	r2, r1
 180 00ea D2B2     		uxtb	r2, r2
 181 00ec D2B2     		uxtb	r2, r2
 182 00ee 9A72     		strb	r2, [r3, #10]
 194:../Generated_Code/IO1.c ****   UART0_PDD_EnableSamplingOnBothEdges(UART0_BASE_PTR, PDD_ENABLE);
 183              		.loc 1 194 0
 184 00f0 174B     		ldr	r3, .L3+20
 185 00f2 174A     		ldr	r2, .L3+20
 186 00f4 D27A     		ldrb	r2, [r2, #11]
 187 00f6 D2B2     		uxtb	r2, r2
 188 00f8 D2B2     		uxtb	r2, r2
 189 00fa 0221     		mov	r1, #2
 190 00fc 0A43     		orr	r2, r1
 191 00fe D2B2     		uxtb	r2, r2
 192 0100 D2B2     		uxtb	r2, r2
 193 0102 DA72     		strb	r2, [r3, #11]
 195:../Generated_Code/IO1.c ****   UART0_PDD_EnableTransmitter(UART0_BASE_PTR, PDD_ENABLE); /* Enable transmitter */
 194              		.loc 1 195 0
 195 0104 124B     		ldr	r3, .L3+20
 196 0106 124A     		ldr	r2, .L3+20
 197 0108 D278     		ldrb	r2, [r2, #3]
 198 010a D2B2     		uxtb	r2, r2
 199 010c D2B2     		uxtb	r2, r2
 200 010e 0821     		mov	r1, #8
 201 0110 0A43     		orr	r2, r1
 202 0112 D2B2     		uxtb	r2, r2
 203 0114 D2B2     		uxtb	r2, r2
 204 0116 DA70     		strb	r2, [r3, #3]
 196:../Generated_Code/IO1.c ****   UART0_PDD_EnableReceiver(UART0_BASE_PTR, PDD_ENABLE); /* Enable receiver */
 205              		.loc 1 196 0
 206 0118 0D4B     		ldr	r3, .L3+20
 207 011a 0D4A     		ldr	r2, .L3+20
 208 011c D278     		ldrb	r2, [r2, #3]
 209 011e D2B2     		uxtb	r2, r2
 210 0120 D2B2     		uxtb	r2, r2
 211 0122 0421     		mov	r1, #4
 212 0124 0A43     		orr	r2, r1
 213 0126 D2B2     		uxtb	r2, r2
 214 0128 D2B2     		uxtb	r2, r2
 215 012a DA70     		strb	r2, [r3, #3]
 197:../Generated_Code/IO1.c ****   /* Registration of the device structure */
 198:../Generated_Code/IO1.c ****   PE_LDD_RegisterDeviceStructure(PE_LDD_COMPONENT_IO1_ID,DeviceDataPrv);
 216              		.loc 1 198 0
 217 012c 0B4B     		ldr	r3, .L3+32
 218 012e FA68     		ldr	r2, [r7, #12]
 219 0130 1A60     		str	r2, [r3]
 199:../Generated_Code/IO1.c ****   return ((LDD_TDeviceData *)DeviceDataPrv);
 220              		.loc 1 199 0
 221 0132 FB68     		ldr	r3, [r7, #12]
 200:../Generated_Code/IO1.c **** }
 222              		.loc 1 200 0
 223 0134 181C     		mov	r0, r3
 224 0136 BD46     		mov	sp, r7
 225 0138 04B0     		add	sp, sp, #16
 226              		@ sp needed for prologue
 227 013a 80BD     		pop	{r7, pc}
 228              	.L4:
 229              		.align	2
 230              	.L3:
 231 013c 00000000 		.word	DeviceDataPrv__DEFAULT_RTOS_ALLOC
 232 0140 00700440 		.word	1074032640
 233 0144 34100000 		.word	4148
 234 0148 00900440 		.word	1074040832
 235 014c FFF8FFFE 		.word	-16779009
 236 0150 00A00640 		.word	1074176000
 237 0154 04100000 		.word	4100
 238 0158 FFFFFFF3 		.word	-201326593
 239 015c 00000000 		.word	PE_LDD_DeviceDataList
 240              		.cfi_endproc
 241              	.LFE0:
 243              		.section	.text.InterruptRx,"ax",%progbits
 244              		.align	2
 245              		.code	16
 246              		.thumb_func
 248              	InterruptRx:
 249              	.LFB1:
 201:../Generated_Code/IO1.c **** 
 202:../Generated_Code/IO1.c **** /*
 203:../Generated_Code/IO1.c **** ** ===================================================================
 204:../Generated_Code/IO1.c **** **     Method      :  InterruptRx (component Serial_LDD)
 205:../Generated_Code/IO1.c **** **
 206:../Generated_Code/IO1.c **** **     Description :
 207:../Generated_Code/IO1.c **** **         The method services the receive interrupt of the selected 
 208:../Generated_Code/IO1.c **** **         peripheral(s) and eventually invokes the bean's event(s).
 209:../Generated_Code/IO1.c **** **         This method is internal. It is used by Processor Expert only.
 210:../Generated_Code/IO1.c **** ** ===================================================================
 211:../Generated_Code/IO1.c **** */
 212:../Generated_Code/IO1.c **** static void InterruptRx(IO1_TDeviceDataPtr DeviceDataPrv)
 213:../Generated_Code/IO1.c **** {
 250              		.loc 1 213 0
 251              		.cfi_startproc
 252 0000 90B5     		push	{r4, r7, lr}
 253              	.LCFI3:
 254              		.cfi_def_cfa_offset 12
 255              		.cfi_offset 4, -12
 256              		.cfi_offset 7, -8
 257              		.cfi_offset 14, -4
 258 0002 83B0     		sub	sp, sp, #12
 259              	.LCFI4:
 260              		.cfi_def_cfa_offset 24
 261 0004 00AF     		add	r7, sp, #0
 262              	.LCFI5:
 263              		.cfi_def_cfa_register 7
 264 0006 7860     		str	r0, [r7, #4]
 214:../Generated_Code/IO1.c ****   register uint16_t Data;              /* Temporary variable for data */
 215:../Generated_Code/IO1.c **** 
 216:../Generated_Code/IO1.c ****   Data = (uint16_t)UART0_PDD_GetChar8(UART0_BASE_PTR); /* Read an 8-bit character from the receiver
 265              		.loc 1 216 0
 266 0008 104B     		ldr	r3, .L7
 267 000a DB79     		ldrb	r3, [r3, #7]
 268 000c DBB2     		uxtb	r3, r3
 269 000e 1C1C     		mov	r4, r3
 217:../Generated_Code/IO1.c ****   if (DeviceDataPrv->InpDataNumReq != 0x00U) { /* Is the receive block operation pending? */
 270              		.loc 1 217 0
 271 0010 7B68     		ldr	r3, [r7, #4]
 272 0012 1B89     		ldrh	r3, [r3, #8]
 273 0014 002B     		cmp	r3, #0
 274 0016 15D0     		beq	.L5
 218:../Generated_Code/IO1.c ****     *(DeviceDataPrv->InpDataPtr++) = (uint8_t)Data; /* Put an 8-bit character to the receive buffer
 275              		.loc 1 218 0
 276 0018 7B68     		ldr	r3, [r7, #4]
 277 001a 5B68     		ldr	r3, [r3, #4]
 278 001c E2B2     		uxtb	r2, r4
 279 001e 1A70     		strb	r2, [r3]
 280 0020 5A1C     		add	r2, r3, #1
 281 0022 7B68     		ldr	r3, [r7, #4]
 282 0024 5A60     		str	r2, [r3, #4]
 219:../Generated_Code/IO1.c ****     DeviceDataPrv->InpRecvDataNum++;   /* Increment received char. counter */
 283              		.loc 1 219 0
 284 0026 7B68     		ldr	r3, [r7, #4]
 285 0028 5B88     		ldrh	r3, [r3, #2]
 286 002a 0133     		add	r3, r3, #1
 287 002c 9AB2     		uxth	r2, r3
 288 002e 7B68     		ldr	r3, [r7, #4]
 289 0030 5A80     		strh	r2, [r3, #2]
 220:../Generated_Code/IO1.c ****     if (DeviceDataPrv->InpRecvDataNum == DeviceDataPrv->InpDataNumReq) { /* Is the requested number
 290              		.loc 1 220 0
 291 0032 7B68     		ldr	r3, [r7, #4]
 292 0034 5A88     		ldrh	r2, [r3, #2]
 293 0036 7B68     		ldr	r3, [r7, #4]
 294 0038 1B89     		ldrh	r3, [r3, #8]
 295 003a 9A42     		cmp	r2, r3
 296 003c 02D1     		bne	.L5
 221:../Generated_Code/IO1.c ****       DeviceDataPrv->InpDataNumReq = 0x00U; /* If yes then clear number of requested characters to 
 297              		.loc 1 221 0
 298 003e 7B68     		ldr	r3, [r7, #4]
 299 0040 0022     		mov	r2, #0
 300 0042 1A81     		strh	r2, [r3, #8]
 301              	.L5:
 222:../Generated_Code/IO1.c ****     }
 223:../Generated_Code/IO1.c ****   }
 224:../Generated_Code/IO1.c **** }
 302              		.loc 1 224 0
 303 0044 BD46     		mov	sp, r7
 304 0046 03B0     		add	sp, sp, #12
 305              		@ sp needed for prologue
 306 0048 90BD     		pop	{r4, r7, pc}
 307              	.L8:
 308 004a C046     		.align	2
 309              	.L7:
 310 004c 00A00640 		.word	1074176000
 311              		.cfi_endproc
 312              	.LFE1:
 314              		.section	.text.InterruptTx,"ax",%progbits
 315              		.align	2
 316              		.code	16
 317              		.thumb_func
 319              	InterruptTx:
 320              	.LFB2:
 225:../Generated_Code/IO1.c **** 
 226:../Generated_Code/IO1.c **** /*
 227:../Generated_Code/IO1.c **** ** ===================================================================
 228:../Generated_Code/IO1.c **** **     Method      :  InterruptTx (component Serial_LDD)
 229:../Generated_Code/IO1.c **** **
 230:../Generated_Code/IO1.c **** **     Description :
 231:../Generated_Code/IO1.c **** **         The method services the receive interrupt of the selected 
 232:../Generated_Code/IO1.c **** **         peripheral(s) and eventually invokes the bean's event(s).
 233:../Generated_Code/IO1.c **** **         This method is internal. It is used by Processor Expert only.
 234:../Generated_Code/IO1.c **** ** ===================================================================
 235:../Generated_Code/IO1.c **** */
 236:../Generated_Code/IO1.c **** static void InterruptTx(IO1_TDeviceDataPtr DeviceDataPrv)
 237:../Generated_Code/IO1.c **** {
 321              		.loc 1 237 0
 322              		.cfi_startproc
 323 0000 80B5     		push	{r7, lr}
 324              	.LCFI6:
 325              		.cfi_def_cfa_offset 8
 326              		.cfi_offset 7, -8
 327              		.cfi_offset 14, -4
 328 0002 82B0     		sub	sp, sp, #8
 329              	.LCFI7:
 330              		.cfi_def_cfa_offset 16
 331 0004 00AF     		add	r7, sp, #0
 332              	.LCFI8:
 333              		.cfi_def_cfa_register 7
 334 0006 7860     		str	r0, [r7, #4]
 238:../Generated_Code/IO1.c **** 
 239:../Generated_Code/IO1.c ****   if (DeviceDataPrv->OutSentDataNum < DeviceDataPrv->OutDataNumReq) { /* Is number of sent characte
 335              		.loc 1 239 0
 336 0008 7B68     		ldr	r3, [r7, #4]
 337 000a 5A89     		ldrh	r2, [r3, #10]
 338 000c 7B68     		ldr	r3, [r7, #4]
 339 000e 1B8A     		ldrh	r3, [r3, #16]
 340 0010 9A42     		cmp	r2, r3
 341 0012 17D2     		bcs	.L10
 240:../Generated_Code/IO1.c ****     UART0_PDD_PutChar8(UART0_BASE_PTR, *(DeviceDataPrv->OutDataPtr++)); /* Put a 8-bit character to
 342              		.loc 1 240 0
 343 0014 104A     		ldr	r2, .L12
 344 0016 7B68     		ldr	r3, [r7, #4]
 345 0018 DB68     		ldr	r3, [r3, #12]
 346 001a 1978     		ldrb	r1, [r3]
 347 001c D171     		strb	r1, [r2, #7]
 348 001e 5A1C     		add	r2, r3, #1
 349 0020 7B68     		ldr	r3, [r7, #4]
 350 0022 DA60     		str	r2, [r3, #12]
 241:../Generated_Code/IO1.c ****     DeviceDataPrv->OutSentDataNum++;   /* Increment the counter of sent characters. */
 351              		.loc 1 241 0
 352 0024 7B68     		ldr	r3, [r7, #4]
 353 0026 5B89     		ldrh	r3, [r3, #10]
 354 0028 0133     		add	r3, r3, #1
 355 002a 9AB2     		uxth	r2, r3
 356 002c 7B68     		ldr	r3, [r7, #4]
 357 002e 5A81     		strh	r2, [r3, #10]
 242:../Generated_Code/IO1.c ****     if (DeviceDataPrv->OutSentDataNum == DeviceDataPrv->OutDataNumReq) {
 358              		.loc 1 242 0
 359 0030 7B68     		ldr	r3, [r7, #4]
 360 0032 5A89     		ldrh	r2, [r3, #10]
 361 0034 7B68     		ldr	r3, [r7, #4]
 362 0036 1B8A     		ldrh	r3, [r3, #16]
 363 0038 9A42     		cmp	r2, r3
 364 003a 0AD1     		bne	.L9
 243:../Generated_Code/IO1.c ****       DeviceDataPrv->OutDataNumReq = 0x00U; /* Clear the counter of characters to be send by SendBl
 365              		.loc 1 243 0
 366 003c 7B68     		ldr	r3, [r7, #4]
 367 003e 0022     		mov	r2, #0
 368 0040 1A82     		strh	r2, [r3, #16]
 369 0042 06E0     		b	.L9
 370              	.L10:
 244:../Generated_Code/IO1.c ****     }
 245:../Generated_Code/IO1.c ****   } else {
 246:../Generated_Code/IO1.c ****     DeviceDataPrv->SerFlag &= (uint16_t)(~(uint16_t)ENABLED_TX_INT); /* Clear the flag ENABLED_TX_I
 371              		.loc 1 246 0
 372 0044 7B68     		ldr	r3, [r7, #4]
 373 0046 1B88     		ldrh	r3, [r3]
 374 0048 0122     		mov	r2, #1
 375 004a 9343     		bic	r3, r2
 376 004c 9AB2     		uxth	r2, r3
 377 004e 7B68     		ldr	r3, [r7, #4]
 378 0050 1A80     		strh	r2, [r3]
 379              	.L9:
 247:../Generated_Code/IO1.c ****   }
 248:../Generated_Code/IO1.c **** }
 380              		.loc 1 248 0
 381 0052 BD46     		mov	sp, r7
 382 0054 02B0     		add	sp, sp, #8
 383              		@ sp needed for prologue
 384 0056 80BD     		pop	{r7, pc}
 385              	.L13:
 386              		.align	2
 387              	.L12:
 388 0058 00A00640 		.word	1074176000
 389              		.cfi_endproc
 390              	.LFE2:
 392              		.section	.text.IO1_Main,"ax",%progbits
 393              		.align	2
 394              		.global	IO1_Main
 395              		.code	16
 396              		.thumb_func
 398              	IO1_Main:
 399              	.LFB3:
 249:../Generated_Code/IO1.c **** 
 250:../Generated_Code/IO1.c **** /*
 251:../Generated_Code/IO1.c **** ** ===================================================================
 252:../Generated_Code/IO1.c **** **     Method      :  IO1_Main (component Serial_LDD)
 253:../Generated_Code/IO1.c **** */
 254:../Generated_Code/IO1.c **** /*!
 255:../Generated_Code/IO1.c **** **     @brief
 256:../Generated_Code/IO1.c **** **         This method is available only in the polling mode (Interrupt
 257:../Generated_Code/IO1.c **** **         service/event = 'no'). If interrupt service is disabled this
 258:../Generated_Code/IO1.c **** **         method replaces the interrupt handler. This method should be
 259:../Generated_Code/IO1.c **** **         called if Receive/SendBlock was invoked before in order to
 260:../Generated_Code/IO1.c **** **         run the reception/transmission. The end of the
 261:../Generated_Code/IO1.c **** **         receiving/transmitting is indicated by OnBlockSent or
 262:../Generated_Code/IO1.c **** **         OnBlockReceived event. 
 263:../Generated_Code/IO1.c **** **     @param
 264:../Generated_Code/IO1.c **** **         DeviceDataPtr   - Device data structure
 265:../Generated_Code/IO1.c **** **                           pointer returned by [Init] method.
 266:../Generated_Code/IO1.c **** */
 267:../Generated_Code/IO1.c **** /* ===================================================================*/
 268:../Generated_Code/IO1.c **** void IO1_Main(LDD_TDeviceData *DeviceDataPtr)
 269:../Generated_Code/IO1.c **** {
 400              		.loc 1 269 0
 401              		.cfi_startproc
 402 0000 90B5     		push	{r4, r7, lr}
 403              	.LCFI9:
 404              		.cfi_def_cfa_offset 12
 405              		.cfi_offset 4, -12
 406              		.cfi_offset 7, -8
 407              		.cfi_offset 14, -4
 408 0002 85B0     		sub	sp, sp, #20
 409              	.LCFI10:
 410              		.cfi_def_cfa_offset 32
 411 0004 00AF     		add	r7, sp, #0
 412              	.LCFI11:
 413              		.cfi_def_cfa_register 7
 414 0006 7860     		str	r0, [r7, #4]
 270:../Generated_Code/IO1.c ****   IO1_TDeviceDataPtr DeviceDataPrv = (IO1_TDeviceDataPtr)DeviceDataPtr;
 415              		.loc 1 270 0
 416 0008 7B68     		ldr	r3, [r7, #4]
 417 000a FB60     		str	r3, [r7, #12]
 271:../Generated_Code/IO1.c ****   register uint32_t StatReg = UART0_PDD_ReadInterruptStatusReg(UART0_BASE_PTR); /* Read status regi
 418              		.loc 1 271 0
 419 000c 124B     		ldr	r3, .L18
 420 000e 1B79     		ldrb	r3, [r3, #4]
 421 0010 DBB2     		uxtb	r3, r3
 422 0012 1C1C     		mov	r4, r3
 272:../Generated_Code/IO1.c **** 
 273:../Generated_Code/IO1.c ****   if (StatReg & (UART0_S1_NF_MASK | UART0_S1_OR_MASK | UART0_S1_FE_MASK | UART0_S1_PF_MASK)) { /* I
 423              		.loc 1 273 0
 424 0014 0F23     		mov	r3, #15
 425 0016 2340     		and	r3, r4
 426 0018 06D0     		beq	.L15
 274:../Generated_Code/IO1.c ****     UART0_PDD_ClearInterruptFlags(UART0_BASE_PTR, (UART0_S1_NF_MASK | UART0_S1_OR_MASK | UART0_S1_F
 427              		.loc 1 274 0
 428 001a 0F4B     		ldr	r3, .L18
 429 001c 0F22     		mov	r2, #15
 430 001e 1A71     		strb	r2, [r3, #4]
 275:../Generated_Code/IO1.c ****     (void)UART0_PDD_GetChar8(UART0_BASE_PTR); /* Dummy read 8-bit character from receiver */
 431              		.loc 1 275 0
 432 0020 0D4B     		ldr	r3, .L18
 433 0022 DB79     		ldrb	r3, [r3, #7]
 276:../Generated_Code/IO1.c ****     StatReg &= (uint32_t)(~(uint32_t)UART0_S1_RDRF_MASK); /* Clear the receive data flag to discard
 434              		.loc 1 276 0
 435 0024 2023     		mov	r3, #32
 436 0026 9C43     		bic	r4, r3
 437              	.L15:
 277:../Generated_Code/IO1.c ****   }
 278:../Generated_Code/IO1.c ****   if (StatReg & UART0_S1_RDRF_MASK) {  /* Is the receiver's interrupt flag set? */
 438              		.loc 1 278 0
 439 0028 2023     		mov	r3, #32
 440 002a 2340     		and	r3, r4
 441 002c 03D0     		beq	.L16
 279:../Generated_Code/IO1.c ****     InterruptRx(DeviceDataPrv);        /* If yes, then invoke the internal service routine. This ro
 442              		.loc 1 279 0
 443 002e FB68     		ldr	r3, [r7, #12]
 444 0030 181C     		mov	r0, r3
 445 0032 FFF7FEFF 		bl	InterruptRx
 446              	.L16:
 280:../Generated_Code/IO1.c ****   }
 281:../Generated_Code/IO1.c ****   if (DeviceDataPrv->SerFlag & ENABLED_TX_INT) { /* Is the transmitter interrupt enabled? */
 447              		.loc 1 281 0
 448 0036 FB68     		ldr	r3, [r7, #12]
 449 0038 1B88     		ldrh	r3, [r3]
 450 003a 1A1C     		mov	r2, r3
 451 003c 0123     		mov	r3, #1
 452 003e 1340     		and	r3, r2
 453 0040 06D0     		beq	.L14
 282:../Generated_Code/IO1.c ****     if (StatReg & UART0_S1_TDRE_MASK) { /* Is the transmitter empty? */
 454              		.loc 1 282 0
 455 0042 8023     		mov	r3, #128
 456 0044 2340     		and	r3, r4
 457 0046 03D0     		beq	.L14
 283:../Generated_Code/IO1.c ****       InterruptTx(DeviceDataPrv);      /* If yes, then invoke the internal service routine. This ro
 458              		.loc 1 283 0
 459 0048 FB68     		ldr	r3, [r7, #12]
 460 004a 181C     		mov	r0, r3
 461 004c FFF7FEFF 		bl	InterruptTx
 462              	.L14:
 284:../Generated_Code/IO1.c ****     }
 285:../Generated_Code/IO1.c ****   }
 286:../Generated_Code/IO1.c **** }
 463              		.loc 1 286 0
 464 0050 BD46     		mov	sp, r7
 465 0052 05B0     		add	sp, sp, #20
 466              		@ sp needed for prologue
 467 0054 90BD     		pop	{r4, r7, pc}
 468              	.L19:
 469 0056 C046     		.align	2
 470              	.L18:
 471 0058 00A00640 		.word	1074176000
 472              		.cfi_endproc
 473              	.LFE3:
 475              		.text
 476              	.Letext0:
 477              		.file 2 "D:/Freescale/CW MCU v10.7/MCU/ARM_GCC_Support/ewl/EWL_C/include/cstdint"
 478              		.file 3 "../Generated_Code/PE_Types.h"
 479              		.file 4 "D:/Freescale/CW MCU v10.7/MCU/ProcessorExpert/lib/Kinetis/iofiles/MKL25Z4.h"
 480              		.file 5 "../Generated_Code/IO1.h"
DEFINED SYMBOLS
                            *ABS*:00000000 IO1.c
C:\Users\JOSHUA~1\AppData\Local\Temp\ccN5Yl1L.s:18     .bss.DeviceDataPrv__DEFAULT_RTOS_ALLOC:00000000 $d
C:\Users\JOSHUA~1\AppData\Local\Temp\ccN5Yl1L.s:21     .bss.DeviceDataPrv__DEFAULT_RTOS_ALLOC:00000000 DeviceDataPrv__DEFAULT_RTOS_ALLOC
C:\Users\JOSHUA~1\AppData\Local\Temp\ccN5Yl1L.s:24     .text.IO1_Init:00000000 $t
C:\Users\JOSHUA~1\AppData\Local\Temp\ccN5Yl1L.s:29     .text.IO1_Init:00000000 IO1_Init
C:\Users\JOSHUA~1\AppData\Local\Temp\ccN5Yl1L.s:231    .text.IO1_Init:0000013c $d
C:\Users\JOSHUA~1\AppData\Local\Temp\ccN5Yl1L.s:244    .text.InterruptRx:00000000 $t
C:\Users\JOSHUA~1\AppData\Local\Temp\ccN5Yl1L.s:248    .text.InterruptRx:00000000 InterruptRx
C:\Users\JOSHUA~1\AppData\Local\Temp\ccN5Yl1L.s:310    .text.InterruptRx:0000004c $d
C:\Users\JOSHUA~1\AppData\Local\Temp\ccN5Yl1L.s:315    .text.InterruptTx:00000000 $t
C:\Users\JOSHUA~1\AppData\Local\Temp\ccN5Yl1L.s:319    .text.InterruptTx:00000000 InterruptTx
C:\Users\JOSHUA~1\AppData\Local\Temp\ccN5Yl1L.s:388    .text.InterruptTx:00000058 $d
C:\Users\JOSHUA~1\AppData\Local\Temp\ccN5Yl1L.s:393    .text.IO1_Main:00000000 $t
C:\Users\JOSHUA~1\AppData\Local\Temp\ccN5Yl1L.s:398    .text.IO1_Main:00000000 IO1_Main
C:\Users\JOSHUA~1\AppData\Local\Temp\ccN5Yl1L.s:471    .text.IO1_Main:00000058 $d
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
PE_LDD_DeviceDataList
